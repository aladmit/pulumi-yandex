# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['MdbClickhouseCluster']


class MdbClickhouseCluster(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access: Optional[pulumi.Input[pulumi.InputType['MdbClickhouseClusterAccessArgs']]] = None,
                 admin_password: Optional[pulumi.Input[str]] = None,
                 backup_window_start: Optional[pulumi.Input[pulumi.InputType['MdbClickhouseClusterBackupWindowStartArgs']]] = None,
                 clickhouse: Optional[pulumi.Input[pulumi.InputType['MdbClickhouseClusterClickhouseArgs']]] = None,
                 copy_schema_on_new_hosts: Optional[pulumi.Input[bool]] = None,
                 databases: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbClickhouseClusterDatabaseArgs']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 environment: Optional[pulumi.Input[str]] = None,
                 folder_id: Optional[pulumi.Input[str]] = None,
                 format_schemas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbClickhouseClusterFormatSchemaArgs']]]]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbClickhouseClusterHostArgs']]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 ml_models: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbClickhouseClusterMlModelArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 shard_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbClickhouseClusterShardGroupArgs']]]]] = None,
                 sql_database_management: Optional[pulumi.Input[bool]] = None,
                 sql_user_management: Optional[pulumi.Input[bool]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbClickhouseClusterUserArgs']]]]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 zookeeper: Optional[pulumi.Input[pulumi.InputType['MdbClickhouseClusterZookeeperArgs']]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Create a MdbClickhouseCluster resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['access'] = access
            __props__['admin_password'] = admin_password
            __props__['backup_window_start'] = backup_window_start
            if clickhouse is None and not opts.urn:
                raise TypeError("Missing required property 'clickhouse'")
            __props__['clickhouse'] = clickhouse
            __props__['copy_schema_on_new_hosts'] = copy_schema_on_new_hosts
            __props__['databases'] = databases
            __props__['description'] = description
            if environment is None and not opts.urn:
                raise TypeError("Missing required property 'environment'")
            __props__['environment'] = environment
            __props__['folder_id'] = folder_id
            __props__['format_schemas'] = format_schemas
            if hosts is None and not opts.urn:
                raise TypeError("Missing required property 'hosts'")
            __props__['hosts'] = hosts
            __props__['labels'] = labels
            __props__['ml_models'] = ml_models
            __props__['name'] = name
            if network_id is None and not opts.urn:
                raise TypeError("Missing required property 'network_id'")
            __props__['network_id'] = network_id
            __props__['security_group_ids'] = security_group_ids
            __props__['shard_groups'] = shard_groups
            __props__['sql_database_management'] = sql_database_management
            __props__['sql_user_management'] = sql_user_management
            __props__['users'] = users
            __props__['version'] = version
            __props__['zookeeper'] = zookeeper
            __props__['created_at'] = None
            __props__['health'] = None
            __props__['status'] = None
        super(MdbClickhouseCluster, __self__).__init__(
            'yandex:index/mdbClickhouseCluster:MdbClickhouseCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access: Optional[pulumi.Input[pulumi.InputType['MdbClickhouseClusterAccessArgs']]] = None,
            admin_password: Optional[pulumi.Input[str]] = None,
            backup_window_start: Optional[pulumi.Input[pulumi.InputType['MdbClickhouseClusterBackupWindowStartArgs']]] = None,
            clickhouse: Optional[pulumi.Input[pulumi.InputType['MdbClickhouseClusterClickhouseArgs']]] = None,
            copy_schema_on_new_hosts: Optional[pulumi.Input[bool]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            databases: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbClickhouseClusterDatabaseArgs']]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            environment: Optional[pulumi.Input[str]] = None,
            folder_id: Optional[pulumi.Input[str]] = None,
            format_schemas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbClickhouseClusterFormatSchemaArgs']]]]] = None,
            health: Optional[pulumi.Input[str]] = None,
            hosts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbClickhouseClusterHostArgs']]]]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            ml_models: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbClickhouseClusterMlModelArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network_id: Optional[pulumi.Input[str]] = None,
            security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            shard_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbClickhouseClusterShardGroupArgs']]]]] = None,
            sql_database_management: Optional[pulumi.Input[bool]] = None,
            sql_user_management: Optional[pulumi.Input[bool]] = None,
            status: Optional[pulumi.Input[str]] = None,
            users: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbClickhouseClusterUserArgs']]]]] = None,
            version: Optional[pulumi.Input[str]] = None,
            zookeeper: Optional[pulumi.Input[pulumi.InputType['MdbClickhouseClusterZookeeperArgs']]] = None) -> 'MdbClickhouseCluster':
        """
        Get an existing MdbClickhouseCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["access"] = access
        __props__["admin_password"] = admin_password
        __props__["backup_window_start"] = backup_window_start
        __props__["clickhouse"] = clickhouse
        __props__["copy_schema_on_new_hosts"] = copy_schema_on_new_hosts
        __props__["created_at"] = created_at
        __props__["databases"] = databases
        __props__["description"] = description
        __props__["environment"] = environment
        __props__["folder_id"] = folder_id
        __props__["format_schemas"] = format_schemas
        __props__["health"] = health
        __props__["hosts"] = hosts
        __props__["labels"] = labels
        __props__["ml_models"] = ml_models
        __props__["name"] = name
        __props__["network_id"] = network_id
        __props__["security_group_ids"] = security_group_ids
        __props__["shard_groups"] = shard_groups
        __props__["sql_database_management"] = sql_database_management
        __props__["sql_user_management"] = sql_user_management
        __props__["status"] = status
        __props__["users"] = users
        __props__["version"] = version
        __props__["zookeeper"] = zookeeper
        return MdbClickhouseCluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def access(self) -> pulumi.Output['outputs.MdbClickhouseClusterAccess']:
        return pulumi.get(self, "access")

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "admin_password")

    @property
    @pulumi.getter(name="backupWindowStart")
    def backup_window_start(self) -> pulumi.Output['outputs.MdbClickhouseClusterBackupWindowStart']:
        return pulumi.get(self, "backup_window_start")

    @property
    @pulumi.getter
    def clickhouse(self) -> pulumi.Output['outputs.MdbClickhouseClusterClickhouse']:
        return pulumi.get(self, "clickhouse")

    @property
    @pulumi.getter(name="copySchemaOnNewHosts")
    def copy_schema_on_new_hosts(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "copy_schema_on_new_hosts")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def databases(self) -> pulumi.Output[Optional[Sequence['outputs.MdbClickhouseClusterDatabase']]]:
        return pulumi.get(self, "databases")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def environment(self) -> pulumi.Output[str]:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter(name="formatSchemas")
    def format_schemas(self) -> pulumi.Output[Optional[Sequence['outputs.MdbClickhouseClusterFormatSchema']]]:
        return pulumi.get(self, "format_schemas")

    @property
    @pulumi.getter
    def health(self) -> pulumi.Output[str]:
        return pulumi.get(self, "health")

    @property
    @pulumi.getter
    def hosts(self) -> pulumi.Output[Sequence['outputs.MdbClickhouseClusterHost']]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="mlModels")
    def ml_models(self) -> pulumi.Output[Optional[Sequence['outputs.MdbClickhouseClusterMlModel']]]:
        return pulumi.get(self, "ml_models")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="shardGroups")
    def shard_groups(self) -> pulumi.Output[Optional[Sequence['outputs.MdbClickhouseClusterShardGroup']]]:
        return pulumi.get(self, "shard_groups")

    @property
    @pulumi.getter(name="sqlDatabaseManagement")
    def sql_database_management(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "sql_database_management")

    @property
    @pulumi.getter(name="sqlUserManagement")
    def sql_user_management(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "sql_user_management")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def users(self) -> pulumi.Output[Optional[Sequence['outputs.MdbClickhouseClusterUser']]]:
        return pulumi.get(self, "users")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def zookeeper(self) -> pulumi.Output['outputs.MdbClickhouseClusterZookeeper']:
        return pulumi.get(self, "zookeeper")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

