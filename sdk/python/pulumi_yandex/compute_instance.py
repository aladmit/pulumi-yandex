# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['ComputeInstance']


class ComputeInstance(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_stopping_for_update: Optional[pulumi.Input[bool]] = None,
                 boot_disk: Optional[pulumi.Input[pulumi.InputType['ComputeInstanceBootDiskArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 folder_id: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_acceleration_type: Optional[pulumi.Input[str]] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ComputeInstanceNetworkInterfaceArgs']]]]] = None,
                 placement_policy: Optional[pulumi.Input[pulumi.InputType['ComputeInstancePlacementPolicyArgs']]] = None,
                 platform_id: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input[pulumi.InputType['ComputeInstanceResourcesArgs']]] = None,
                 scheduling_policy: Optional[pulumi.Input[pulumi.InputType['ComputeInstanceSchedulingPolicyArgs']]] = None,
                 secondary_disks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ComputeInstanceSecondaryDiskArgs']]]]] = None,
                 service_account_id: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Create a ComputeInstance resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['allow_stopping_for_update'] = allow_stopping_for_update
            if boot_disk is None and not opts.urn:
                raise TypeError("Missing required property 'boot_disk'")
            __props__['boot_disk'] = boot_disk
            __props__['description'] = description
            __props__['folder_id'] = folder_id
            __props__['hostname'] = hostname
            __props__['labels'] = labels
            __props__['metadata'] = metadata
            __props__['name'] = name
            __props__['network_acceleration_type'] = network_acceleration_type
            if network_interfaces is None and not opts.urn:
                raise TypeError("Missing required property 'network_interfaces'")
            __props__['network_interfaces'] = network_interfaces
            __props__['placement_policy'] = placement_policy
            __props__['platform_id'] = platform_id
            if resources is None and not opts.urn:
                raise TypeError("Missing required property 'resources'")
            __props__['resources'] = resources
            __props__['scheduling_policy'] = scheduling_policy
            __props__['secondary_disks'] = secondary_disks
            __props__['service_account_id'] = service_account_id
            __props__['zone'] = zone
            __props__['created_at'] = None
            __props__['fqdn'] = None
            __props__['status'] = None
        super(ComputeInstance, __self__).__init__(
            'yandex:index/computeInstance:ComputeInstance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_stopping_for_update: Optional[pulumi.Input[bool]] = None,
            boot_disk: Optional[pulumi.Input[pulumi.InputType['ComputeInstanceBootDiskArgs']]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            folder_id: Optional[pulumi.Input[str]] = None,
            fqdn: Optional[pulumi.Input[str]] = None,
            hostname: Optional[pulumi.Input[str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network_acceleration_type: Optional[pulumi.Input[str]] = None,
            network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ComputeInstanceNetworkInterfaceArgs']]]]] = None,
            placement_policy: Optional[pulumi.Input[pulumi.InputType['ComputeInstancePlacementPolicyArgs']]] = None,
            platform_id: Optional[pulumi.Input[str]] = None,
            resources: Optional[pulumi.Input[pulumi.InputType['ComputeInstanceResourcesArgs']]] = None,
            scheduling_policy: Optional[pulumi.Input[pulumi.InputType['ComputeInstanceSchedulingPolicyArgs']]] = None,
            secondary_disks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ComputeInstanceSecondaryDiskArgs']]]]] = None,
            service_account_id: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            zone: Optional[pulumi.Input[str]] = None) -> 'ComputeInstance':
        """
        Get an existing ComputeInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["allow_stopping_for_update"] = allow_stopping_for_update
        __props__["boot_disk"] = boot_disk
        __props__["created_at"] = created_at
        __props__["description"] = description
        __props__["folder_id"] = folder_id
        __props__["fqdn"] = fqdn
        __props__["hostname"] = hostname
        __props__["labels"] = labels
        __props__["metadata"] = metadata
        __props__["name"] = name
        __props__["network_acceleration_type"] = network_acceleration_type
        __props__["network_interfaces"] = network_interfaces
        __props__["placement_policy"] = placement_policy
        __props__["platform_id"] = platform_id
        __props__["resources"] = resources
        __props__["scheduling_policy"] = scheduling_policy
        __props__["secondary_disks"] = secondary_disks
        __props__["service_account_id"] = service_account_id
        __props__["status"] = status
        __props__["zone"] = zone
        return ComputeInstance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowStoppingForUpdate")
    def allow_stopping_for_update(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "allow_stopping_for_update")

    @property
    @pulumi.getter(name="bootDisk")
    def boot_disk(self) -> pulumi.Output['outputs.ComputeInstanceBootDisk']:
        return pulumi.get(self, "boot_disk")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter
    def fqdn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkAccelerationType")
    def network_acceleration_type(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "network_acceleration_type")

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> pulumi.Output[Sequence['outputs.ComputeInstanceNetworkInterface']]:
        return pulumi.get(self, "network_interfaces")

    @property
    @pulumi.getter(name="placementPolicy")
    def placement_policy(self) -> pulumi.Output['outputs.ComputeInstancePlacementPolicy']:
        return pulumi.get(self, "placement_policy")

    @property
    @pulumi.getter(name="platformId")
    def platform_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "platform_id")

    @property
    @pulumi.getter
    def resources(self) -> pulumi.Output['outputs.ComputeInstanceResources']:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="schedulingPolicy")
    def scheduling_policy(self) -> pulumi.Output['outputs.ComputeInstanceSchedulingPolicy']:
        return pulumi.get(self, "scheduling_policy")

    @property
    @pulumi.getter(name="secondaryDisks")
    def secondary_disks(self) -> pulumi.Output[Optional[Sequence['outputs.ComputeInstanceSecondaryDisk']]]:
        return pulumi.get(self, "secondary_disks")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "service_account_id")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Output[str]:
        return pulumi.get(self, "zone")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

