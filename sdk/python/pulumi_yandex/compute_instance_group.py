# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['ComputeInstanceGroup']


class ComputeInstanceGroup(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allocation_policy: Optional[pulumi.Input[pulumi.InputType['ComputeInstanceGroupAllocationPolicyArgs']]] = None,
                 deletion_protection: Optional[pulumi.Input[bool]] = None,
                 deploy_policy: Optional[pulumi.Input[pulumi.InputType['ComputeInstanceGroupDeployPolicyArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 folder_id: Optional[pulumi.Input[str]] = None,
                 health_checks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ComputeInstanceGroupHealthCheckArgs']]]]] = None,
                 instance_template: Optional[pulumi.Input[pulumi.InputType['ComputeInstanceGroupInstanceTemplateArgs']]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 load_balancer: Optional[pulumi.Input[pulumi.InputType['ComputeInstanceGroupLoadBalancerArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scale_policy: Optional[pulumi.Input[pulumi.InputType['ComputeInstanceGroupScalePolicyArgs']]] = None,
                 service_account_id: Optional[pulumi.Input[str]] = None,
                 variables: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Create a ComputeInstanceGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if allocation_policy is None and not opts.urn:
                raise TypeError("Missing required property 'allocation_policy'")
            __props__['allocation_policy'] = allocation_policy
            __props__['deletion_protection'] = deletion_protection
            if deploy_policy is None and not opts.urn:
                raise TypeError("Missing required property 'deploy_policy'")
            __props__['deploy_policy'] = deploy_policy
            __props__['description'] = description
            __props__['folder_id'] = folder_id
            __props__['health_checks'] = health_checks
            if instance_template is None and not opts.urn:
                raise TypeError("Missing required property 'instance_template'")
            __props__['instance_template'] = instance_template
            __props__['labels'] = labels
            __props__['load_balancer'] = load_balancer
            __props__['name'] = name
            if scale_policy is None and not opts.urn:
                raise TypeError("Missing required property 'scale_policy'")
            __props__['scale_policy'] = scale_policy
            if service_account_id is None and not opts.urn:
                raise TypeError("Missing required property 'service_account_id'")
            __props__['service_account_id'] = service_account_id
            __props__['variables'] = variables
            __props__['created_at'] = None
            __props__['instances'] = None
            __props__['status'] = None
        super(ComputeInstanceGroup, __self__).__init__(
            'yandex:index/computeInstanceGroup:ComputeInstanceGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allocation_policy: Optional[pulumi.Input[pulumi.InputType['ComputeInstanceGroupAllocationPolicyArgs']]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            deletion_protection: Optional[pulumi.Input[bool]] = None,
            deploy_policy: Optional[pulumi.Input[pulumi.InputType['ComputeInstanceGroupDeployPolicyArgs']]] = None,
            description: Optional[pulumi.Input[str]] = None,
            folder_id: Optional[pulumi.Input[str]] = None,
            health_checks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ComputeInstanceGroupHealthCheckArgs']]]]] = None,
            instance_template: Optional[pulumi.Input[pulumi.InputType['ComputeInstanceGroupInstanceTemplateArgs']]] = None,
            instances: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ComputeInstanceGroupInstanceArgs']]]]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            load_balancer: Optional[pulumi.Input[pulumi.InputType['ComputeInstanceGroupLoadBalancerArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            scale_policy: Optional[pulumi.Input[pulumi.InputType['ComputeInstanceGroupScalePolicyArgs']]] = None,
            service_account_id: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            variables: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None) -> 'ComputeInstanceGroup':
        """
        Get an existing ComputeInstanceGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["allocation_policy"] = allocation_policy
        __props__["created_at"] = created_at
        __props__["deletion_protection"] = deletion_protection
        __props__["deploy_policy"] = deploy_policy
        __props__["description"] = description
        __props__["folder_id"] = folder_id
        __props__["health_checks"] = health_checks
        __props__["instance_template"] = instance_template
        __props__["instances"] = instances
        __props__["labels"] = labels
        __props__["load_balancer"] = load_balancer
        __props__["name"] = name
        __props__["scale_policy"] = scale_policy
        __props__["service_account_id"] = service_account_id
        __props__["status"] = status
        __props__["variables"] = variables
        return ComputeInstanceGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allocationPolicy")
    def allocation_policy(self) -> pulumi.Output['outputs.ComputeInstanceGroupAllocationPolicy']:
        return pulumi.get(self, "allocation_policy")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "deletion_protection")

    @property
    @pulumi.getter(name="deployPolicy")
    def deploy_policy(self) -> pulumi.Output['outputs.ComputeInstanceGroupDeployPolicy']:
        return pulumi.get(self, "deploy_policy")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> pulumi.Output[Optional[Sequence['outputs.ComputeInstanceGroupHealthCheck']]]:
        return pulumi.get(self, "health_checks")

    @property
    @pulumi.getter(name="instanceTemplate")
    def instance_template(self) -> pulumi.Output['outputs.ComputeInstanceGroupInstanceTemplate']:
        return pulumi.get(self, "instance_template")

    @property
    @pulumi.getter
    def instances(self) -> pulumi.Output[Sequence['outputs.ComputeInstanceGroupInstance']]:
        return pulumi.get(self, "instances")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="loadBalancer")
    def load_balancer(self) -> pulumi.Output[Optional['outputs.ComputeInstanceGroupLoadBalancer']]:
        return pulumi.get(self, "load_balancer")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="scalePolicy")
    def scale_policy(self) -> pulumi.Output['outputs.ComputeInstanceGroupScalePolicy']:
        return pulumi.get(self, "scale_policy")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "service_account_id")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def variables(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        return pulumi.get(self, "variables")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

