# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs

__all__ = [
    'GetComputeInstanceGroupResult',
    'AwaitableGetComputeInstanceGroupResult',
    'get_compute_instance_group',
]

@pulumi.output_type
class GetComputeInstanceGroupResult:
    """
    A collection of values returned by getComputeInstanceGroup.
    """
    def __init__(__self__, allocation_policy=None, created_at=None, deletion_protection=None, deploy_policy=None, description=None, folder_id=None, health_checks=None, id=None, instance_group_id=None, instance_template=None, instances=None, labels=None, load_balancer=None, load_balancer_state=None, name=None, scale_policy=None, service_account_id=None, status=None, variables=None):
        if allocation_policy and not isinstance(allocation_policy, dict):
            raise TypeError("Expected argument 'allocation_policy' to be a dict")
        pulumi.set(__self__, "allocation_policy", allocation_policy)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if deletion_protection and not isinstance(deletion_protection, bool):
            raise TypeError("Expected argument 'deletion_protection' to be a bool")
        pulumi.set(__self__, "deletion_protection", deletion_protection)
        if deploy_policy and not isinstance(deploy_policy, dict):
            raise TypeError("Expected argument 'deploy_policy' to be a dict")
        pulumi.set(__self__, "deploy_policy", deploy_policy)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if folder_id and not isinstance(folder_id, str):
            raise TypeError("Expected argument 'folder_id' to be a str")
        pulumi.set(__self__, "folder_id", folder_id)
        if health_checks and not isinstance(health_checks, list):
            raise TypeError("Expected argument 'health_checks' to be a list")
        pulumi.set(__self__, "health_checks", health_checks)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_group_id and not isinstance(instance_group_id, str):
            raise TypeError("Expected argument 'instance_group_id' to be a str")
        pulumi.set(__self__, "instance_group_id", instance_group_id)
        if instance_template and not isinstance(instance_template, dict):
            raise TypeError("Expected argument 'instance_template' to be a dict")
        pulumi.set(__self__, "instance_template", instance_template)
        if instances and not isinstance(instances, list):
            raise TypeError("Expected argument 'instances' to be a list")
        pulumi.set(__self__, "instances", instances)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if load_balancer and not isinstance(load_balancer, dict):
            raise TypeError("Expected argument 'load_balancer' to be a dict")
        pulumi.set(__self__, "load_balancer", load_balancer)
        if load_balancer_state and not isinstance(load_balancer_state, dict):
            raise TypeError("Expected argument 'load_balancer_state' to be a dict")
        pulumi.set(__self__, "load_balancer_state", load_balancer_state)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if scale_policy and not isinstance(scale_policy, dict):
            raise TypeError("Expected argument 'scale_policy' to be a dict")
        pulumi.set(__self__, "scale_policy", scale_policy)
        if service_account_id and not isinstance(service_account_id, str):
            raise TypeError("Expected argument 'service_account_id' to be a str")
        pulumi.set(__self__, "service_account_id", service_account_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if variables and not isinstance(variables, dict):
            raise TypeError("Expected argument 'variables' to be a dict")
        pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter(name="allocationPolicy")
    def allocation_policy(self) -> 'outputs.GetComputeInstanceGroupAllocationPolicyResult':
        return pulumi.get(self, "allocation_policy")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> bool:
        return pulumi.get(self, "deletion_protection")

    @property
    @pulumi.getter(name="deployPolicy")
    def deploy_policy(self) -> 'outputs.GetComputeInstanceGroupDeployPolicyResult':
        return pulumi.get(self, "deploy_policy")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> str:
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> Sequence['outputs.GetComputeInstanceGroupHealthCheckResult']:
        return pulumi.get(self, "health_checks")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceGroupId")
    def instance_group_id(self) -> str:
        return pulumi.get(self, "instance_group_id")

    @property
    @pulumi.getter(name="instanceTemplate")
    def instance_template(self) -> 'outputs.GetComputeInstanceGroupInstanceTemplateResult':
        return pulumi.get(self, "instance_template")

    @property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.GetComputeInstanceGroupInstanceResult']:
        return pulumi.get(self, "instances")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="loadBalancer")
    def load_balancer(self) -> 'outputs.GetComputeInstanceGroupLoadBalancerResult':
        return pulumi.get(self, "load_balancer")

    @property
    @pulumi.getter(name="loadBalancerState")
    def load_balancer_state(self) -> 'outputs.GetComputeInstanceGroupLoadBalancerStateResult':
        return pulumi.get(self, "load_balancer_state")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="scalePolicy")
    def scale_policy(self) -> 'outputs.GetComputeInstanceGroupScalePolicyResult':
        return pulumi.get(self, "scale_policy")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> str:
        return pulumi.get(self, "service_account_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def variables(self) -> Mapping[str, str]:
        return pulumi.get(self, "variables")


class AwaitableGetComputeInstanceGroupResult(GetComputeInstanceGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetComputeInstanceGroupResult(
            allocation_policy=self.allocation_policy,
            created_at=self.created_at,
            deletion_protection=self.deletion_protection,
            deploy_policy=self.deploy_policy,
            description=self.description,
            folder_id=self.folder_id,
            health_checks=self.health_checks,
            id=self.id,
            instance_group_id=self.instance_group_id,
            instance_template=self.instance_template,
            instances=self.instances,
            labels=self.labels,
            load_balancer=self.load_balancer,
            load_balancer_state=self.load_balancer_state,
            name=self.name,
            scale_policy=self.scale_policy,
            service_account_id=self.service_account_id,
            status=self.status,
            variables=self.variables)


def get_compute_instance_group(instance_group_id: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetComputeInstanceGroupResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['instanceGroupId'] = instance_group_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('yandex:index/getComputeInstanceGroup:getComputeInstanceGroup', __args__, opts=opts, typ=GetComputeInstanceGroupResult).value

    return AwaitableGetComputeInstanceGroupResult(
        allocation_policy=__ret__.allocation_policy,
        created_at=__ret__.created_at,
        deletion_protection=__ret__.deletion_protection,
        deploy_policy=__ret__.deploy_policy,
        description=__ret__.description,
        folder_id=__ret__.folder_id,
        health_checks=__ret__.health_checks,
        id=__ret__.id,
        instance_group_id=__ret__.instance_group_id,
        instance_template=__ret__.instance_template,
        instances=__ret__.instances,
        labels=__ret__.labels,
        load_balancer=__ret__.load_balancer,
        load_balancer_state=__ret__.load_balancer_state,
        name=__ret__.name,
        scale_policy=__ret__.scale_policy,
        service_account_id=__ret__.service_account_id,
        status=__ret__.status,
        variables=__ret__.variables)
