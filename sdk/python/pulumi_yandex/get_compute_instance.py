# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = [
    'GetComputeInstanceResult',
    'AwaitableGetComputeInstanceResult',
    'get_compute_instance',
]

@pulumi.output_type
class GetComputeInstanceResult:
    """
    A collection of values returned by getComputeInstance.
    """
    def __init__(__self__, boot_disk=None, created_at=None, description=None, folder_id=None, fqdn=None, id=None, instance_id=None, labels=None, metadata=None, name=None, network_acceleration_type=None, network_interfaces=None, placement_policy=None, platform_id=None, resources=None, scheduling_policy=None, secondary_disks=None, service_account_id=None, status=None, zone=None):
        if boot_disk and not isinstance(boot_disk, dict):
            raise TypeError("Expected argument 'boot_disk' to be a dict")
        pulumi.set(__self__, "boot_disk", boot_disk)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if folder_id and not isinstance(folder_id, str):
            raise TypeError("Expected argument 'folder_id' to be a str")
        pulumi.set(__self__, "folder_id", folder_id)
        if fqdn and not isinstance(fqdn, str):
            raise TypeError("Expected argument 'fqdn' to be a str")
        pulumi.set(__self__, "fqdn", fqdn)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        pulumi.set(__self__, "metadata", metadata)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_acceleration_type and not isinstance(network_acceleration_type, str):
            raise TypeError("Expected argument 'network_acceleration_type' to be a str")
        pulumi.set(__self__, "network_acceleration_type", network_acceleration_type)
        if network_interfaces and not isinstance(network_interfaces, list):
            raise TypeError("Expected argument 'network_interfaces' to be a list")
        pulumi.set(__self__, "network_interfaces", network_interfaces)
        if placement_policy and not isinstance(placement_policy, dict):
            raise TypeError("Expected argument 'placement_policy' to be a dict")
        pulumi.set(__self__, "placement_policy", placement_policy)
        if platform_id and not isinstance(platform_id, str):
            raise TypeError("Expected argument 'platform_id' to be a str")
        pulumi.set(__self__, "platform_id", platform_id)
        if resources and not isinstance(resources, dict):
            raise TypeError("Expected argument 'resources' to be a dict")
        pulumi.set(__self__, "resources", resources)
        if scheduling_policy and not isinstance(scheduling_policy, dict):
            raise TypeError("Expected argument 'scheduling_policy' to be a dict")
        pulumi.set(__self__, "scheduling_policy", scheduling_policy)
        if secondary_disks and not isinstance(secondary_disks, list):
            raise TypeError("Expected argument 'secondary_disks' to be a list")
        pulumi.set(__self__, "secondary_disks", secondary_disks)
        if service_account_id and not isinstance(service_account_id, str):
            raise TypeError("Expected argument 'service_account_id' to be a str")
        pulumi.set(__self__, "service_account_id", service_account_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="bootDisk")
    def boot_disk(self) -> 'outputs.GetComputeInstanceBootDiskResult':
        return pulumi.get(self, "boot_disk")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> str:
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkAccelerationType")
    def network_acceleration_type(self) -> str:
        return pulumi.get(self, "network_acceleration_type")

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Sequence['outputs.GetComputeInstanceNetworkInterfaceResult']:
        return pulumi.get(self, "network_interfaces")

    @property
    @pulumi.getter(name="placementPolicy")
    def placement_policy(self) -> Optional['outputs.GetComputeInstancePlacementPolicyResult']:
        return pulumi.get(self, "placement_policy")

    @property
    @pulumi.getter(name="platformId")
    def platform_id(self) -> str:
        return pulumi.get(self, "platform_id")

    @property
    @pulumi.getter
    def resources(self) -> 'outputs.GetComputeInstanceResourcesResult':
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="schedulingPolicy")
    def scheduling_policy(self) -> 'outputs.GetComputeInstanceSchedulingPolicyResult':
        return pulumi.get(self, "scheduling_policy")

    @property
    @pulumi.getter(name="secondaryDisks")
    def secondary_disks(self) -> Sequence['outputs.GetComputeInstanceSecondaryDiskResult']:
        return pulumi.get(self, "secondary_disks")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> str:
        return pulumi.get(self, "service_account_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


class AwaitableGetComputeInstanceResult(GetComputeInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetComputeInstanceResult(
            boot_disk=self.boot_disk,
            created_at=self.created_at,
            description=self.description,
            folder_id=self.folder_id,
            fqdn=self.fqdn,
            id=self.id,
            instance_id=self.instance_id,
            labels=self.labels,
            metadata=self.metadata,
            name=self.name,
            network_acceleration_type=self.network_acceleration_type,
            network_interfaces=self.network_interfaces,
            placement_policy=self.placement_policy,
            platform_id=self.platform_id,
            resources=self.resources,
            scheduling_policy=self.scheduling_policy,
            secondary_disks=self.secondary_disks,
            service_account_id=self.service_account_id,
            status=self.status,
            zone=self.zone)


def get_compute_instance(folder_id: Optional[str] = None,
                         instance_id: Optional[str] = None,
                         name: Optional[str] = None,
                         placement_policy: Optional[pulumi.InputType['GetComputeInstancePlacementPolicyArgs']] = None,
                         scheduling_policy: Optional[pulumi.InputType['GetComputeInstanceSchedulingPolicyArgs']] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetComputeInstanceResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['folderId'] = folder_id
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['placementPolicy'] = placement_policy
    __args__['schedulingPolicy'] = scheduling_policy
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('yandex:index/getComputeInstance:getComputeInstance', __args__, opts=opts, typ=GetComputeInstanceResult).value

    return AwaitableGetComputeInstanceResult(
        boot_disk=__ret__.boot_disk,
        created_at=__ret__.created_at,
        description=__ret__.description,
        folder_id=__ret__.folder_id,
        fqdn=__ret__.fqdn,
        id=__ret__.id,
        instance_id=__ret__.instance_id,
        labels=__ret__.labels,
        metadata=__ret__.metadata,
        name=__ret__.name,
        network_acceleration_type=__ret__.network_acceleration_type,
        network_interfaces=__ret__.network_interfaces,
        placement_policy=__ret__.placement_policy,
        platform_id=__ret__.platform_id,
        resources=__ret__.resources,
        scheduling_policy=__ret__.scheduling_policy,
        secondary_disks=__ret__.secondary_disks,
        service_account_id=__ret__.service_account_id,
        status=__ret__.status,
        zone=__ret__.zone)
