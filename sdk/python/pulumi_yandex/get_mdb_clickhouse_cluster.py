# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs

__all__ = [
    'GetMdbClickhouseClusterResult',
    'AwaitableGetMdbClickhouseClusterResult',
    'get_mdb_clickhouse_cluster',
]

@pulumi.output_type
class GetMdbClickhouseClusterResult:
    """
    A collection of values returned by getMdbClickhouseCluster.
    """
    def __init__(__self__, access=None, backup_window_start=None, clickhouse=None, cluster_id=None, created_at=None, databases=None, description=None, environment=None, folder_id=None, format_schemas=None, health=None, hosts=None, id=None, labels=None, ml_models=None, name=None, network_id=None, security_group_ids=None, shard_groups=None, sql_database_management=None, sql_user_management=None, status=None, users=None, version=None, zookeeper=None):
        if access and not isinstance(access, dict):
            raise TypeError("Expected argument 'access' to be a dict")
        pulumi.set(__self__, "access", access)
        if backup_window_start and not isinstance(backup_window_start, dict):
            raise TypeError("Expected argument 'backup_window_start' to be a dict")
        pulumi.set(__self__, "backup_window_start", backup_window_start)
        if clickhouse and not isinstance(clickhouse, dict):
            raise TypeError("Expected argument 'clickhouse' to be a dict")
        pulumi.set(__self__, "clickhouse", clickhouse)
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if databases and not isinstance(databases, list):
            raise TypeError("Expected argument 'databases' to be a list")
        pulumi.set(__self__, "databases", databases)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if environment and not isinstance(environment, str):
            raise TypeError("Expected argument 'environment' to be a str")
        pulumi.set(__self__, "environment", environment)
        if folder_id and not isinstance(folder_id, str):
            raise TypeError("Expected argument 'folder_id' to be a str")
        pulumi.set(__self__, "folder_id", folder_id)
        if format_schemas and not isinstance(format_schemas, list):
            raise TypeError("Expected argument 'format_schemas' to be a list")
        pulumi.set(__self__, "format_schemas", format_schemas)
        if health and not isinstance(health, str):
            raise TypeError("Expected argument 'health' to be a str")
        pulumi.set(__self__, "health", health)
        if hosts and not isinstance(hosts, list):
            raise TypeError("Expected argument 'hosts' to be a list")
        pulumi.set(__self__, "hosts", hosts)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if ml_models and not isinstance(ml_models, list):
            raise TypeError("Expected argument 'ml_models' to be a list")
        pulumi.set(__self__, "ml_models", ml_models)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_id and not isinstance(network_id, str):
            raise TypeError("Expected argument 'network_id' to be a str")
        pulumi.set(__self__, "network_id", network_id)
        if security_group_ids and not isinstance(security_group_ids, list):
            raise TypeError("Expected argument 'security_group_ids' to be a list")
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        if shard_groups and not isinstance(shard_groups, list):
            raise TypeError("Expected argument 'shard_groups' to be a list")
        pulumi.set(__self__, "shard_groups", shard_groups)
        if sql_database_management and not isinstance(sql_database_management, bool):
            raise TypeError("Expected argument 'sql_database_management' to be a bool")
        pulumi.set(__self__, "sql_database_management", sql_database_management)
        if sql_user_management and not isinstance(sql_user_management, bool):
            raise TypeError("Expected argument 'sql_user_management' to be a bool")
        pulumi.set(__self__, "sql_user_management", sql_user_management)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if users and not isinstance(users, list):
            raise TypeError("Expected argument 'users' to be a list")
        pulumi.set(__self__, "users", users)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)
        if zookeeper and not isinstance(zookeeper, dict):
            raise TypeError("Expected argument 'zookeeper' to be a dict")
        pulumi.set(__self__, "zookeeper", zookeeper)

    @property
    @pulumi.getter
    def access(self) -> 'outputs.GetMdbClickhouseClusterAccessResult':
        return pulumi.get(self, "access")

    @property
    @pulumi.getter(name="backupWindowStart")
    def backup_window_start(self) -> 'outputs.GetMdbClickhouseClusterBackupWindowStartResult':
        return pulumi.get(self, "backup_window_start")

    @property
    @pulumi.getter
    def clickhouse(self) -> 'outputs.GetMdbClickhouseClusterClickhouseResult':
        return pulumi.get(self, "clickhouse")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def databases(self) -> Sequence['outputs.GetMdbClickhouseClusterDatabaseResult']:
        return pulumi.get(self, "databases")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def environment(self) -> str:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> str:
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter(name="formatSchemas")
    def format_schemas(self) -> Sequence['outputs.GetMdbClickhouseClusterFormatSchemaResult']:
        return pulumi.get(self, "format_schemas")

    @property
    @pulumi.getter
    def health(self) -> str:
        return pulumi.get(self, "health")

    @property
    @pulumi.getter
    def hosts(self) -> Sequence['outputs.GetMdbClickhouseClusterHostResult']:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="mlModels")
    def ml_models(self) -> Sequence['outputs.GetMdbClickhouseClusterMlModelResult']:
        return pulumi.get(self, "ml_models")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> str:
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[str]:
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="shardGroups")
    def shard_groups(self) -> Sequence['outputs.GetMdbClickhouseClusterShardGroupResult']:
        return pulumi.get(self, "shard_groups")

    @property
    @pulumi.getter(name="sqlDatabaseManagement")
    def sql_database_management(self) -> bool:
        return pulumi.get(self, "sql_database_management")

    @property
    @pulumi.getter(name="sqlUserManagement")
    def sql_user_management(self) -> bool:
        return pulumi.get(self, "sql_user_management")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetMdbClickhouseClusterUserResult']:
        return pulumi.get(self, "users")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def zookeeper(self) -> 'outputs.GetMdbClickhouseClusterZookeeperResult':
        return pulumi.get(self, "zookeeper")


class AwaitableGetMdbClickhouseClusterResult(GetMdbClickhouseClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMdbClickhouseClusterResult(
            access=self.access,
            backup_window_start=self.backup_window_start,
            clickhouse=self.clickhouse,
            cluster_id=self.cluster_id,
            created_at=self.created_at,
            databases=self.databases,
            description=self.description,
            environment=self.environment,
            folder_id=self.folder_id,
            format_schemas=self.format_schemas,
            health=self.health,
            hosts=self.hosts,
            id=self.id,
            labels=self.labels,
            ml_models=self.ml_models,
            name=self.name,
            network_id=self.network_id,
            security_group_ids=self.security_group_ids,
            shard_groups=self.shard_groups,
            sql_database_management=self.sql_database_management,
            sql_user_management=self.sql_user_management,
            status=self.status,
            users=self.users,
            version=self.version,
            zookeeper=self.zookeeper)


def get_mdb_clickhouse_cluster(cluster_id: Optional[str] = None,
                               folder_id: Optional[str] = None,
                               name: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMdbClickhouseClusterResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['folderId'] = folder_id
    __args__['name'] = name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('yandex:index/getMdbClickhouseCluster:getMdbClickhouseCluster', __args__, opts=opts, typ=GetMdbClickhouseClusterResult).value

    return AwaitableGetMdbClickhouseClusterResult(
        access=__ret__.access,
        backup_window_start=__ret__.backup_window_start,
        clickhouse=__ret__.clickhouse,
        cluster_id=__ret__.cluster_id,
        created_at=__ret__.created_at,
        databases=__ret__.databases,
        description=__ret__.description,
        environment=__ret__.environment,
        folder_id=__ret__.folder_id,
        format_schemas=__ret__.format_schemas,
        health=__ret__.health,
        hosts=__ret__.hosts,
        id=__ret__.id,
        labels=__ret__.labels,
        ml_models=__ret__.ml_models,
        name=__ret__.name,
        network_id=__ret__.network_id,
        security_group_ids=__ret__.security_group_ids,
        shard_groups=__ret__.shard_groups,
        sql_database_management=__ret__.sql_database_management,
        sql_user_management=__ret__.sql_user_management,
        status=__ret__.status,
        users=__ret__.users,
        version=__ret__.version,
        zookeeper=__ret__.zookeeper)
