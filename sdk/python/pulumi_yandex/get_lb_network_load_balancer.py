# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs

__all__ = [
    'GetLbNetworkLoadBalancerResult',
    'AwaitableGetLbNetworkLoadBalancerResult',
    'get_lb_network_load_balancer',
]

@pulumi.output_type
class GetLbNetworkLoadBalancerResult:
    """
    A collection of values returned by getLbNetworkLoadBalancer.
    """
    def __init__(__self__, attached_target_groups=None, created_at=None, description=None, folder_id=None, id=None, labels=None, listeners=None, name=None, network_load_balancer_id=None, region_id=None, type=None):
        if attached_target_groups and not isinstance(attached_target_groups, list):
            raise TypeError("Expected argument 'attached_target_groups' to be a list")
        pulumi.set(__self__, "attached_target_groups", attached_target_groups)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if folder_id and not isinstance(folder_id, str):
            raise TypeError("Expected argument 'folder_id' to be a str")
        pulumi.set(__self__, "folder_id", folder_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if listeners and not isinstance(listeners, list):
            raise TypeError("Expected argument 'listeners' to be a list")
        pulumi.set(__self__, "listeners", listeners)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_load_balancer_id and not isinstance(network_load_balancer_id, str):
            raise TypeError("Expected argument 'network_load_balancer_id' to be a str")
        pulumi.set(__self__, "network_load_balancer_id", network_load_balancer_id)
        if region_id and not isinstance(region_id, str):
            raise TypeError("Expected argument 'region_id' to be a str")
        pulumi.set(__self__, "region_id", region_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="attachedTargetGroups")
    def attached_target_groups(self) -> Sequence['outputs.GetLbNetworkLoadBalancerAttachedTargetGroupResult']:
        return pulumi.get(self, "attached_target_groups")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> str:
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def listeners(self) -> Sequence['outputs.GetLbNetworkLoadBalancerListenerResult']:
        return pulumi.get(self, "listeners")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkLoadBalancerId")
    def network_load_balancer_id(self) -> str:
        return pulumi.get(self, "network_load_balancer_id")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> str:
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


class AwaitableGetLbNetworkLoadBalancerResult(GetLbNetworkLoadBalancerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLbNetworkLoadBalancerResult(
            attached_target_groups=self.attached_target_groups,
            created_at=self.created_at,
            description=self.description,
            folder_id=self.folder_id,
            id=self.id,
            labels=self.labels,
            listeners=self.listeners,
            name=self.name,
            network_load_balancer_id=self.network_load_balancer_id,
            region_id=self.region_id,
            type=self.type)


def get_lb_network_load_balancer(folder_id: Optional[str] = None,
                                 name: Optional[str] = None,
                                 network_load_balancer_id: Optional[str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLbNetworkLoadBalancerResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['folderId'] = folder_id
    __args__['name'] = name
    __args__['networkLoadBalancerId'] = network_load_balancer_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('yandex:index/getLbNetworkLoadBalancer:getLbNetworkLoadBalancer', __args__, opts=opts, typ=GetLbNetworkLoadBalancerResult).value

    return AwaitableGetLbNetworkLoadBalancerResult(
        attached_target_groups=__ret__.attached_target_groups,
        created_at=__ret__.created_at,
        description=__ret__.description,
        folder_id=__ret__.folder_id,
        id=__ret__.id,
        labels=__ret__.labels,
        listeners=__ret__.listeners,
        name=__ret__.name,
        network_load_balancer_id=__ret__.network_load_balancer_id,
        region_id=__ret__.region_id,
        type=__ret__.type)
