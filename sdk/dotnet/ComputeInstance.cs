// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    [YandexResourceType("yandex:index/computeInstance:ComputeInstance")]
    public partial class ComputeInstance : Pulumi.CustomResource
    {
        [Output("allowStoppingForUpdate")]
        public Output<bool?> AllowStoppingForUpdate { get; private set; } = null!;

        [Output("bootDisk")]
        public Output<Outputs.ComputeInstanceBootDisk> BootDisk { get; private set; } = null!;

        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("folderId")]
        public Output<string> FolderId { get; private set; } = null!;

        [Output("fqdn")]
        public Output<string> Fqdn { get; private set; } = null!;

        [Output("hostname")]
        public Output<string> Hostname { get; private set; } = null!;

        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>?> Metadata { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("networkAccelerationType")]
        public Output<string?> NetworkAccelerationType { get; private set; } = null!;

        [Output("networkInterfaces")]
        public Output<ImmutableArray<Outputs.ComputeInstanceNetworkInterface>> NetworkInterfaces { get; private set; } = null!;

        [Output("placementPolicy")]
        public Output<Outputs.ComputeInstancePlacementPolicy> PlacementPolicy { get; private set; } = null!;

        [Output("platformId")]
        public Output<string?> PlatformId { get; private set; } = null!;

        [Output("resources")]
        public Output<Outputs.ComputeInstanceResources> Resources { get; private set; } = null!;

        [Output("schedulingPolicy")]
        public Output<Outputs.ComputeInstanceSchedulingPolicy> SchedulingPolicy { get; private set; } = null!;

        [Output("secondaryDisks")]
        public Output<ImmutableArray<Outputs.ComputeInstanceSecondaryDisk>> SecondaryDisks { get; private set; } = null!;

        [Output("serviceAccountId")]
        public Output<string> ServiceAccountId { get; private set; } = null!;

        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a ComputeInstance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ComputeInstance(string name, ComputeInstanceArgs args, CustomResourceOptions? options = null)
            : base("yandex:index/computeInstance:ComputeInstance", name, args ?? new ComputeInstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ComputeInstance(string name, Input<string> id, ComputeInstanceState? state = null, CustomResourceOptions? options = null)
            : base("yandex:index/computeInstance:ComputeInstance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ComputeInstance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ComputeInstance Get(string name, Input<string> id, ComputeInstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new ComputeInstance(name, id, state, options);
        }
    }

    public sealed class ComputeInstanceArgs : Pulumi.ResourceArgs
    {
        [Input("allowStoppingForUpdate")]
        public Input<bool>? AllowStoppingForUpdate { get; set; }

        [Input("bootDisk", required: true)]
        public Input<Inputs.ComputeInstanceBootDiskArgs> BootDisk { get; set; } = null!;

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("metadata")]
        private InputMap<string>? _metadata;
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkAccelerationType")]
        public Input<string>? NetworkAccelerationType { get; set; }

        [Input("networkInterfaces", required: true)]
        private InputList<Inputs.ComputeInstanceNetworkInterfaceArgs>? _networkInterfaces;
        public InputList<Inputs.ComputeInstanceNetworkInterfaceArgs> NetworkInterfaces
        {
            get => _networkInterfaces ?? (_networkInterfaces = new InputList<Inputs.ComputeInstanceNetworkInterfaceArgs>());
            set => _networkInterfaces = value;
        }

        [Input("placementPolicy")]
        public Input<Inputs.ComputeInstancePlacementPolicyArgs>? PlacementPolicy { get; set; }

        [Input("platformId")]
        public Input<string>? PlatformId { get; set; }

        [Input("resources", required: true)]
        public Input<Inputs.ComputeInstanceResourcesArgs> Resources { get; set; } = null!;

        [Input("schedulingPolicy")]
        public Input<Inputs.ComputeInstanceSchedulingPolicyArgs>? SchedulingPolicy { get; set; }

        [Input("secondaryDisks")]
        private InputList<Inputs.ComputeInstanceSecondaryDiskArgs>? _secondaryDisks;
        public InputList<Inputs.ComputeInstanceSecondaryDiskArgs> SecondaryDisks
        {
            get => _secondaryDisks ?? (_secondaryDisks = new InputList<Inputs.ComputeInstanceSecondaryDiskArgs>());
            set => _secondaryDisks = value;
        }

        [Input("serviceAccountId")]
        public Input<string>? ServiceAccountId { get; set; }

        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public ComputeInstanceArgs()
        {
        }
    }

    public sealed class ComputeInstanceState : Pulumi.ResourceArgs
    {
        [Input("allowStoppingForUpdate")]
        public Input<bool>? AllowStoppingForUpdate { get; set; }

        [Input("bootDisk")]
        public Input<Inputs.ComputeInstanceBootDiskGetArgs>? BootDisk { get; set; }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        [Input("fqdn")]
        public Input<string>? Fqdn { get; set; }

        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("metadata")]
        private InputMap<string>? _metadata;
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkAccelerationType")]
        public Input<string>? NetworkAccelerationType { get; set; }

        [Input("networkInterfaces")]
        private InputList<Inputs.ComputeInstanceNetworkInterfaceGetArgs>? _networkInterfaces;
        public InputList<Inputs.ComputeInstanceNetworkInterfaceGetArgs> NetworkInterfaces
        {
            get => _networkInterfaces ?? (_networkInterfaces = new InputList<Inputs.ComputeInstanceNetworkInterfaceGetArgs>());
            set => _networkInterfaces = value;
        }

        [Input("placementPolicy")]
        public Input<Inputs.ComputeInstancePlacementPolicyGetArgs>? PlacementPolicy { get; set; }

        [Input("platformId")]
        public Input<string>? PlatformId { get; set; }

        [Input("resources")]
        public Input<Inputs.ComputeInstanceResourcesGetArgs>? Resources { get; set; }

        [Input("schedulingPolicy")]
        public Input<Inputs.ComputeInstanceSchedulingPolicyGetArgs>? SchedulingPolicy { get; set; }

        [Input("secondaryDisks")]
        private InputList<Inputs.ComputeInstanceSecondaryDiskGetArgs>? _secondaryDisks;
        public InputList<Inputs.ComputeInstanceSecondaryDiskGetArgs> SecondaryDisks
        {
            get => _secondaryDisks ?? (_secondaryDisks = new InputList<Inputs.ComputeInstanceSecondaryDiskGetArgs>());
            set => _secondaryDisks = value;
        }

        [Input("serviceAccountId")]
        public Input<string>? ServiceAccountId { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public ComputeInstanceState()
        {
        }
    }
}
