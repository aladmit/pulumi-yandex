// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    public static class GetComputeInstanceGroup
    {
        public static Task<GetComputeInstanceGroupResult> InvokeAsync(GetComputeInstanceGroupArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetComputeInstanceGroupResult>("yandex:index/getComputeInstanceGroup:getComputeInstanceGroup", args ?? new GetComputeInstanceGroupArgs(), options.WithVersion());
    }


    public sealed class GetComputeInstanceGroupArgs : Pulumi.InvokeArgs
    {
        [Input("instanceGroupId", required: true)]
        public string InstanceGroupId { get; set; } = null!;

        public GetComputeInstanceGroupArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetComputeInstanceGroupResult
    {
        public readonly Outputs.GetComputeInstanceGroupAllocationPolicyResult AllocationPolicy;
        public readonly string CreatedAt;
        public readonly bool DeletionProtection;
        public readonly Outputs.GetComputeInstanceGroupDeployPolicyResult DeployPolicy;
        public readonly string Description;
        public readonly string FolderId;
        public readonly ImmutableArray<Outputs.GetComputeInstanceGroupHealthCheckResult> HealthChecks;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string InstanceGroupId;
        public readonly Outputs.GetComputeInstanceGroupInstanceTemplateResult InstanceTemplate;
        public readonly ImmutableArray<Outputs.GetComputeInstanceGroupInstanceResult> Instances;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly Outputs.GetComputeInstanceGroupLoadBalancerResult LoadBalancer;
        public readonly Outputs.GetComputeInstanceGroupLoadBalancerStateResult LoadBalancerState;
        public readonly string Name;
        public readonly Outputs.GetComputeInstanceGroupScalePolicyResult ScalePolicy;
        public readonly string ServiceAccountId;
        public readonly string Status;
        public readonly ImmutableDictionary<string, string> Variables;

        [OutputConstructor]
        private GetComputeInstanceGroupResult(
            Outputs.GetComputeInstanceGroupAllocationPolicyResult allocationPolicy,

            string createdAt,

            bool deletionProtection,

            Outputs.GetComputeInstanceGroupDeployPolicyResult deployPolicy,

            string description,

            string folderId,

            ImmutableArray<Outputs.GetComputeInstanceGroupHealthCheckResult> healthChecks,

            string id,

            string instanceGroupId,

            Outputs.GetComputeInstanceGroupInstanceTemplateResult instanceTemplate,

            ImmutableArray<Outputs.GetComputeInstanceGroupInstanceResult> instances,

            ImmutableDictionary<string, string> labels,

            Outputs.GetComputeInstanceGroupLoadBalancerResult loadBalancer,

            Outputs.GetComputeInstanceGroupLoadBalancerStateResult loadBalancerState,

            string name,

            Outputs.GetComputeInstanceGroupScalePolicyResult scalePolicy,

            string serviceAccountId,

            string status,

            ImmutableDictionary<string, string> variables)
        {
            AllocationPolicy = allocationPolicy;
            CreatedAt = createdAt;
            DeletionProtection = deletionProtection;
            DeployPolicy = deployPolicy;
            Description = description;
            FolderId = folderId;
            HealthChecks = healthChecks;
            Id = id;
            InstanceGroupId = instanceGroupId;
            InstanceTemplate = instanceTemplate;
            Instances = instances;
            Labels = labels;
            LoadBalancer = loadBalancer;
            LoadBalancerState = loadBalancerState;
            Name = name;
            ScalePolicy = scalePolicy;
            ServiceAccountId = serviceAccountId;
            Status = status;
            Variables = variables;
        }
    }
}
