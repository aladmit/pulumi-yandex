// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    public static class GetMdbClickhouseCluster
    {
        public static Task<GetMdbClickhouseClusterResult> InvokeAsync(GetMdbClickhouseClusterArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetMdbClickhouseClusterResult>("yandex:index/getMdbClickhouseCluster:getMdbClickhouseCluster", args ?? new GetMdbClickhouseClusterArgs(), options.WithVersion());
    }


    public sealed class GetMdbClickhouseClusterArgs : Pulumi.InvokeArgs
    {
        [Input("clusterId")]
        public string? ClusterId { get; set; }

        [Input("folderId")]
        public string? FolderId { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        public GetMdbClickhouseClusterArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetMdbClickhouseClusterResult
    {
        public readonly Outputs.GetMdbClickhouseClusterAccessResult Access;
        public readonly Outputs.GetMdbClickhouseClusterBackupWindowStartResult BackupWindowStart;
        public readonly Outputs.GetMdbClickhouseClusterClickhouseResult Clickhouse;
        public readonly string ClusterId;
        public readonly string CreatedAt;
        public readonly ImmutableArray<Outputs.GetMdbClickhouseClusterDatabaseResult> Databases;
        public readonly string Description;
        public readonly string Environment;
        public readonly string FolderId;
        public readonly ImmutableArray<Outputs.GetMdbClickhouseClusterFormatSchemaResult> FormatSchemas;
        public readonly string Health;
        public readonly ImmutableArray<Outputs.GetMdbClickhouseClusterHostResult> Hosts;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly ImmutableArray<Outputs.GetMdbClickhouseClusterMlModelResult> MlModels;
        public readonly string Name;
        public readonly string NetworkId;
        public readonly ImmutableArray<string> SecurityGroupIds;
        public readonly ImmutableArray<Outputs.GetMdbClickhouseClusterShardGroupResult> ShardGroups;
        public readonly bool SqlDatabaseManagement;
        public readonly bool SqlUserManagement;
        public readonly string Status;
        public readonly ImmutableArray<Outputs.GetMdbClickhouseClusterUserResult> Users;
        public readonly string Version;
        public readonly Outputs.GetMdbClickhouseClusterZookeeperResult Zookeeper;

        [OutputConstructor]
        private GetMdbClickhouseClusterResult(
            Outputs.GetMdbClickhouseClusterAccessResult access,

            Outputs.GetMdbClickhouseClusterBackupWindowStartResult backupWindowStart,

            Outputs.GetMdbClickhouseClusterClickhouseResult clickhouse,

            string clusterId,

            string createdAt,

            ImmutableArray<Outputs.GetMdbClickhouseClusterDatabaseResult> databases,

            string description,

            string environment,

            string folderId,

            ImmutableArray<Outputs.GetMdbClickhouseClusterFormatSchemaResult> formatSchemas,

            string health,

            ImmutableArray<Outputs.GetMdbClickhouseClusterHostResult> hosts,

            string id,

            ImmutableDictionary<string, string> labels,

            ImmutableArray<Outputs.GetMdbClickhouseClusterMlModelResult> mlModels,

            string name,

            string networkId,

            ImmutableArray<string> securityGroupIds,

            ImmutableArray<Outputs.GetMdbClickhouseClusterShardGroupResult> shardGroups,

            bool sqlDatabaseManagement,

            bool sqlUserManagement,

            string status,

            ImmutableArray<Outputs.GetMdbClickhouseClusterUserResult> users,

            string version,

            Outputs.GetMdbClickhouseClusterZookeeperResult zookeeper)
        {
            Access = access;
            BackupWindowStart = backupWindowStart;
            Clickhouse = clickhouse;
            ClusterId = clusterId;
            CreatedAt = createdAt;
            Databases = databases;
            Description = description;
            Environment = environment;
            FolderId = folderId;
            FormatSchemas = formatSchemas;
            Health = health;
            Hosts = hosts;
            Id = id;
            Labels = labels;
            MlModels = mlModels;
            Name = name;
            NetworkId = networkId;
            SecurityGroupIds = securityGroupIds;
            ShardGroups = shardGroups;
            SqlDatabaseManagement = sqlDatabaseManagement;
            SqlUserManagement = sqlUserManagement;
            Status = status;
            Users = users;
            Version = version;
            Zookeeper = zookeeper;
        }
    }
}
