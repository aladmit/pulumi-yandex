// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ComputeDisk struct {
	pulumi.CustomResourceState

	CreatedAt           pulumi.StringOutput                  `pulumi:"createdAt"`
	Description         pulumi.StringPtrOutput               `pulumi:"description"`
	DiskPlacementPolicy ComputeDiskDiskPlacementPolicyOutput `pulumi:"diskPlacementPolicy"`
	FolderId            pulumi.StringOutput                  `pulumi:"folderId"`
	ImageId             pulumi.StringPtrOutput               `pulumi:"imageId"`
	Labels              pulumi.StringMapOutput               `pulumi:"labels"`
	Name                pulumi.StringOutput                  `pulumi:"name"`
	ProductIds          pulumi.StringArrayOutput             `pulumi:"productIds"`
	Size                pulumi.IntPtrOutput                  `pulumi:"size"`
	SnapshotId          pulumi.StringPtrOutput               `pulumi:"snapshotId"`
	Status              pulumi.StringOutput                  `pulumi:"status"`
	Type                pulumi.StringPtrOutput               `pulumi:"type"`
	Zone                pulumi.StringOutput                  `pulumi:"zone"`
}

// NewComputeDisk registers a new resource with the given unique name, arguments, and options.
func NewComputeDisk(ctx *pulumi.Context,
	name string, args *ComputeDiskArgs, opts ...pulumi.ResourceOption) (*ComputeDisk, error) {
	if args == nil {
		args = &ComputeDiskArgs{}
	}

	var resource ComputeDisk
	err := ctx.RegisterResource("yandex:index/computeDisk:ComputeDisk", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeDisk gets an existing ComputeDisk resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeDisk(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeDiskState, opts ...pulumi.ResourceOption) (*ComputeDisk, error) {
	var resource ComputeDisk
	err := ctx.ReadResource("yandex:index/computeDisk:ComputeDisk", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeDisk resources.
type computeDiskState struct {
	CreatedAt           *string                         `pulumi:"createdAt"`
	Description         *string                         `pulumi:"description"`
	DiskPlacementPolicy *ComputeDiskDiskPlacementPolicy `pulumi:"diskPlacementPolicy"`
	FolderId            *string                         `pulumi:"folderId"`
	ImageId             *string                         `pulumi:"imageId"`
	Labels              map[string]string               `pulumi:"labels"`
	Name                *string                         `pulumi:"name"`
	ProductIds          []string                        `pulumi:"productIds"`
	Size                *int                            `pulumi:"size"`
	SnapshotId          *string                         `pulumi:"snapshotId"`
	Status              *string                         `pulumi:"status"`
	Type                *string                         `pulumi:"type"`
	Zone                *string                         `pulumi:"zone"`
}

type ComputeDiskState struct {
	CreatedAt           pulumi.StringPtrInput
	Description         pulumi.StringPtrInput
	DiskPlacementPolicy ComputeDiskDiskPlacementPolicyPtrInput
	FolderId            pulumi.StringPtrInput
	ImageId             pulumi.StringPtrInput
	Labels              pulumi.StringMapInput
	Name                pulumi.StringPtrInput
	ProductIds          pulumi.StringArrayInput
	Size                pulumi.IntPtrInput
	SnapshotId          pulumi.StringPtrInput
	Status              pulumi.StringPtrInput
	Type                pulumi.StringPtrInput
	Zone                pulumi.StringPtrInput
}

func (ComputeDiskState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeDiskState)(nil)).Elem()
}

type computeDiskArgs struct {
	Description         *string                         `pulumi:"description"`
	DiskPlacementPolicy *ComputeDiskDiskPlacementPolicy `pulumi:"diskPlacementPolicy"`
	FolderId            *string                         `pulumi:"folderId"`
	ImageId             *string                         `pulumi:"imageId"`
	Labels              map[string]string               `pulumi:"labels"`
	Name                *string                         `pulumi:"name"`
	Size                *int                            `pulumi:"size"`
	SnapshotId          *string                         `pulumi:"snapshotId"`
	Type                *string                         `pulumi:"type"`
	Zone                *string                         `pulumi:"zone"`
}

// The set of arguments for constructing a ComputeDisk resource.
type ComputeDiskArgs struct {
	Description         pulumi.StringPtrInput
	DiskPlacementPolicy ComputeDiskDiskPlacementPolicyPtrInput
	FolderId            pulumi.StringPtrInput
	ImageId             pulumi.StringPtrInput
	Labels              pulumi.StringMapInput
	Name                pulumi.StringPtrInput
	Size                pulumi.IntPtrInput
	SnapshotId          pulumi.StringPtrInput
	Type                pulumi.StringPtrInput
	Zone                pulumi.StringPtrInput
}

func (ComputeDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeDiskArgs)(nil)).Elem()
}

type ComputeDiskInput interface {
	pulumi.Input

	ToComputeDiskOutput() ComputeDiskOutput
	ToComputeDiskOutputWithContext(ctx context.Context) ComputeDiskOutput
}

func (*ComputeDisk) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeDisk)(nil))
}

func (i *ComputeDisk) ToComputeDiskOutput() ComputeDiskOutput {
	return i.ToComputeDiskOutputWithContext(context.Background())
}

func (i *ComputeDisk) ToComputeDiskOutputWithContext(ctx context.Context) ComputeDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeDiskOutput)
}

type ComputeDiskOutput struct {
	*pulumi.OutputState
}

func (ComputeDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeDisk)(nil))
}

func (o ComputeDiskOutput) ToComputeDiskOutput() ComputeDiskOutput {
	return o
}

func (o ComputeDiskOutput) ToComputeDiskOutputWithContext(ctx context.Context) ComputeDiskOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ComputeDiskOutput{})
}
