// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type IotCoreDevice struct {
	pulumi.CustomResourceState

	Aliases      pulumi.StringMapOutput   `pulumi:"aliases"`
	Certificates pulumi.StringArrayOutput `pulumi:"certificates"`
	CreatedAt    pulumi.StringOutput      `pulumi:"createdAt"`
	Description  pulumi.StringPtrOutput   `pulumi:"description"`
	Name         pulumi.StringOutput      `pulumi:"name"`
	Passwords    pulumi.StringArrayOutput `pulumi:"passwords"`
	RegistryId   pulumi.StringOutput      `pulumi:"registryId"`
}

// NewIotCoreDevice registers a new resource with the given unique name, arguments, and options.
func NewIotCoreDevice(ctx *pulumi.Context,
	name string, args *IotCoreDeviceArgs, opts ...pulumi.ResourceOption) (*IotCoreDevice, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RegistryId == nil {
		return nil, errors.New("invalid value for required argument 'RegistryId'")
	}
	var resource IotCoreDevice
	err := ctx.RegisterResource("yandex:index/iotCoreDevice:IotCoreDevice", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIotCoreDevice gets an existing IotCoreDevice resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIotCoreDevice(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IotCoreDeviceState, opts ...pulumi.ResourceOption) (*IotCoreDevice, error) {
	var resource IotCoreDevice
	err := ctx.ReadResource("yandex:index/iotCoreDevice:IotCoreDevice", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IotCoreDevice resources.
type iotCoreDeviceState struct {
	Aliases      map[string]string `pulumi:"aliases"`
	Certificates []string          `pulumi:"certificates"`
	CreatedAt    *string           `pulumi:"createdAt"`
	Description  *string           `pulumi:"description"`
	Name         *string           `pulumi:"name"`
	Passwords    []string          `pulumi:"passwords"`
	RegistryId   *string           `pulumi:"registryId"`
}

type IotCoreDeviceState struct {
	Aliases      pulumi.StringMapInput
	Certificates pulumi.StringArrayInput
	CreatedAt    pulumi.StringPtrInput
	Description  pulumi.StringPtrInput
	Name         pulumi.StringPtrInput
	Passwords    pulumi.StringArrayInput
	RegistryId   pulumi.StringPtrInput
}

func (IotCoreDeviceState) ElementType() reflect.Type {
	return reflect.TypeOf((*iotCoreDeviceState)(nil)).Elem()
}

type iotCoreDeviceArgs struct {
	Aliases      map[string]string `pulumi:"aliases"`
	Certificates []string          `pulumi:"certificates"`
	Description  *string           `pulumi:"description"`
	Name         *string           `pulumi:"name"`
	Passwords    []string          `pulumi:"passwords"`
	RegistryId   string            `pulumi:"registryId"`
}

// The set of arguments for constructing a IotCoreDevice resource.
type IotCoreDeviceArgs struct {
	Aliases      pulumi.StringMapInput
	Certificates pulumi.StringArrayInput
	Description  pulumi.StringPtrInput
	Name         pulumi.StringPtrInput
	Passwords    pulumi.StringArrayInput
	RegistryId   pulumi.StringInput
}

func (IotCoreDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iotCoreDeviceArgs)(nil)).Elem()
}

type IotCoreDeviceInput interface {
	pulumi.Input

	ToIotCoreDeviceOutput() IotCoreDeviceOutput
	ToIotCoreDeviceOutputWithContext(ctx context.Context) IotCoreDeviceOutput
}

func (*IotCoreDevice) ElementType() reflect.Type {
	return reflect.TypeOf((*IotCoreDevice)(nil))
}

func (i *IotCoreDevice) ToIotCoreDeviceOutput() IotCoreDeviceOutput {
	return i.ToIotCoreDeviceOutputWithContext(context.Background())
}

func (i *IotCoreDevice) ToIotCoreDeviceOutputWithContext(ctx context.Context) IotCoreDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IotCoreDeviceOutput)
}

type IotCoreDeviceOutput struct {
	*pulumi.OutputState
}

func (IotCoreDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IotCoreDevice)(nil))
}

func (o IotCoreDeviceOutput) ToIotCoreDeviceOutput() IotCoreDeviceOutput {
	return o
}

func (o IotCoreDeviceOutput) ToIotCoreDeviceOutputWithContext(ctx context.Context) IotCoreDeviceOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(IotCoreDeviceOutput{})
}
