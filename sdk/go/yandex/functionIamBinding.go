// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type FunctionIamBinding struct {
	pulumi.CustomResourceState

	FunctionId pulumi.StringOutput      `pulumi:"functionId"`
	Members    pulumi.StringArrayOutput `pulumi:"members"`
	Role       pulumi.StringOutput      `pulumi:"role"`
	SleepAfter pulumi.IntPtrOutput      `pulumi:"sleepAfter"`
}

// NewFunctionIamBinding registers a new resource with the given unique name, arguments, and options.
func NewFunctionIamBinding(ctx *pulumi.Context,
	name string, args *FunctionIamBindingArgs, opts ...pulumi.ResourceOption) (*FunctionIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FunctionId == nil {
		return nil, errors.New("invalid value for required argument 'FunctionId'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource FunctionIamBinding
	err := ctx.RegisterResource("yandex:index/functionIamBinding:FunctionIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFunctionIamBinding gets an existing FunctionIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFunctionIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FunctionIamBindingState, opts ...pulumi.ResourceOption) (*FunctionIamBinding, error) {
	var resource FunctionIamBinding
	err := ctx.ReadResource("yandex:index/functionIamBinding:FunctionIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FunctionIamBinding resources.
type functionIamBindingState struct {
	FunctionId *string  `pulumi:"functionId"`
	Members    []string `pulumi:"members"`
	Role       *string  `pulumi:"role"`
	SleepAfter *int     `pulumi:"sleepAfter"`
}

type FunctionIamBindingState struct {
	FunctionId pulumi.StringPtrInput
	Members    pulumi.StringArrayInput
	Role       pulumi.StringPtrInput
	SleepAfter pulumi.IntPtrInput
}

func (FunctionIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*functionIamBindingState)(nil)).Elem()
}

type functionIamBindingArgs struct {
	FunctionId string   `pulumi:"functionId"`
	Members    []string `pulumi:"members"`
	Role       string   `pulumi:"role"`
	SleepAfter *int     `pulumi:"sleepAfter"`
}

// The set of arguments for constructing a FunctionIamBinding resource.
type FunctionIamBindingArgs struct {
	FunctionId pulumi.StringInput
	Members    pulumi.StringArrayInput
	Role       pulumi.StringInput
	SleepAfter pulumi.IntPtrInput
}

func (FunctionIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*functionIamBindingArgs)(nil)).Elem()
}

type FunctionIamBindingInput interface {
	pulumi.Input

	ToFunctionIamBindingOutput() FunctionIamBindingOutput
	ToFunctionIamBindingOutputWithContext(ctx context.Context) FunctionIamBindingOutput
}

func (*FunctionIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionIamBinding)(nil))
}

func (i *FunctionIamBinding) ToFunctionIamBindingOutput() FunctionIamBindingOutput {
	return i.ToFunctionIamBindingOutputWithContext(context.Background())
}

func (i *FunctionIamBinding) ToFunctionIamBindingOutputWithContext(ctx context.Context) FunctionIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionIamBindingOutput)
}

type FunctionIamBindingOutput struct {
	*pulumi.OutputState
}

func (FunctionIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionIamBinding)(nil))
}

func (o FunctionIamBindingOutput) ToFunctionIamBindingOutput() FunctionIamBindingOutput {
	return o
}

func (o FunctionIamBindingOutput) ToFunctionIamBindingOutputWithContext(ctx context.Context) FunctionIamBindingOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(FunctionIamBindingOutput{})
}
