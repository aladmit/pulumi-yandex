// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ResourcemanagerCloudIamMember struct {
	pulumi.CustomResourceState

	CloudId    pulumi.StringOutput `pulumi:"cloudId"`
	Member     pulumi.StringOutput `pulumi:"member"`
	Role       pulumi.StringOutput `pulumi:"role"`
	SleepAfter pulumi.IntPtrOutput `pulumi:"sleepAfter"`
}

// NewResourcemanagerCloudIamMember registers a new resource with the given unique name, arguments, and options.
func NewResourcemanagerCloudIamMember(ctx *pulumi.Context,
	name string, args *ResourcemanagerCloudIamMemberArgs, opts ...pulumi.ResourceOption) (*ResourcemanagerCloudIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CloudId == nil {
		return nil, errors.New("invalid value for required argument 'CloudId'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource ResourcemanagerCloudIamMember
	err := ctx.RegisterResource("yandex:index/resourcemanagerCloudIamMember:ResourcemanagerCloudIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourcemanagerCloudIamMember gets an existing ResourcemanagerCloudIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourcemanagerCloudIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourcemanagerCloudIamMemberState, opts ...pulumi.ResourceOption) (*ResourcemanagerCloudIamMember, error) {
	var resource ResourcemanagerCloudIamMember
	err := ctx.ReadResource("yandex:index/resourcemanagerCloudIamMember:ResourcemanagerCloudIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourcemanagerCloudIamMember resources.
type resourcemanagerCloudIamMemberState struct {
	CloudId    *string `pulumi:"cloudId"`
	Member     *string `pulumi:"member"`
	Role       *string `pulumi:"role"`
	SleepAfter *int    `pulumi:"sleepAfter"`
}

type ResourcemanagerCloudIamMemberState struct {
	CloudId    pulumi.StringPtrInput
	Member     pulumi.StringPtrInput
	Role       pulumi.StringPtrInput
	SleepAfter pulumi.IntPtrInput
}

func (ResourcemanagerCloudIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourcemanagerCloudIamMemberState)(nil)).Elem()
}

type resourcemanagerCloudIamMemberArgs struct {
	CloudId    string `pulumi:"cloudId"`
	Member     string `pulumi:"member"`
	Role       string `pulumi:"role"`
	SleepAfter *int   `pulumi:"sleepAfter"`
}

// The set of arguments for constructing a ResourcemanagerCloudIamMember resource.
type ResourcemanagerCloudIamMemberArgs struct {
	CloudId    pulumi.StringInput
	Member     pulumi.StringInput
	Role       pulumi.StringInput
	SleepAfter pulumi.IntPtrInput
}

func (ResourcemanagerCloudIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourcemanagerCloudIamMemberArgs)(nil)).Elem()
}

type ResourcemanagerCloudIamMemberInput interface {
	pulumi.Input

	ToResourcemanagerCloudIamMemberOutput() ResourcemanagerCloudIamMemberOutput
	ToResourcemanagerCloudIamMemberOutputWithContext(ctx context.Context) ResourcemanagerCloudIamMemberOutput
}

func (*ResourcemanagerCloudIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcemanagerCloudIamMember)(nil))
}

func (i *ResourcemanagerCloudIamMember) ToResourcemanagerCloudIamMemberOutput() ResourcemanagerCloudIamMemberOutput {
	return i.ToResourcemanagerCloudIamMemberOutputWithContext(context.Background())
}

func (i *ResourcemanagerCloudIamMember) ToResourcemanagerCloudIamMemberOutputWithContext(ctx context.Context) ResourcemanagerCloudIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcemanagerCloudIamMemberOutput)
}

type ResourcemanagerCloudIamMemberOutput struct {
	*pulumi.OutputState
}

func (ResourcemanagerCloudIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourcemanagerCloudIamMember)(nil))
}

func (o ResourcemanagerCloudIamMemberOutput) ToResourcemanagerCloudIamMemberOutput() ResourcemanagerCloudIamMemberOutput {
	return o
}

func (o ResourcemanagerCloudIamMemberOutput) ToResourcemanagerCloudIamMemberOutputWithContext(ctx context.Context) ResourcemanagerCloudIamMemberOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ResourcemanagerCloudIamMemberOutput{})
}
