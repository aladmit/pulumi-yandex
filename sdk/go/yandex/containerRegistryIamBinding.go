// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ContainerRegistryIamBinding struct {
	pulumi.CustomResourceState

	Members    pulumi.StringArrayOutput `pulumi:"members"`
	RegistryId pulumi.StringOutput      `pulumi:"registryId"`
	Role       pulumi.StringOutput      `pulumi:"role"`
	SleepAfter pulumi.IntPtrOutput      `pulumi:"sleepAfter"`
}

// NewContainerRegistryIamBinding registers a new resource with the given unique name, arguments, and options.
func NewContainerRegistryIamBinding(ctx *pulumi.Context,
	name string, args *ContainerRegistryIamBindingArgs, opts ...pulumi.ResourceOption) (*ContainerRegistryIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.RegistryId == nil {
		return nil, errors.New("invalid value for required argument 'RegistryId'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource ContainerRegistryIamBinding
	err := ctx.RegisterResource("yandex:index/containerRegistryIamBinding:ContainerRegistryIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContainerRegistryIamBinding gets an existing ContainerRegistryIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainerRegistryIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContainerRegistryIamBindingState, opts ...pulumi.ResourceOption) (*ContainerRegistryIamBinding, error) {
	var resource ContainerRegistryIamBinding
	err := ctx.ReadResource("yandex:index/containerRegistryIamBinding:ContainerRegistryIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContainerRegistryIamBinding resources.
type containerRegistryIamBindingState struct {
	Members    []string `pulumi:"members"`
	RegistryId *string  `pulumi:"registryId"`
	Role       *string  `pulumi:"role"`
	SleepAfter *int     `pulumi:"sleepAfter"`
}

type ContainerRegistryIamBindingState struct {
	Members    pulumi.StringArrayInput
	RegistryId pulumi.StringPtrInput
	Role       pulumi.StringPtrInput
	SleepAfter pulumi.IntPtrInput
}

func (ContainerRegistryIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*containerRegistryIamBindingState)(nil)).Elem()
}

type containerRegistryIamBindingArgs struct {
	Members    []string `pulumi:"members"`
	RegistryId string   `pulumi:"registryId"`
	Role       string   `pulumi:"role"`
	SleepAfter *int     `pulumi:"sleepAfter"`
}

// The set of arguments for constructing a ContainerRegistryIamBinding resource.
type ContainerRegistryIamBindingArgs struct {
	Members    pulumi.StringArrayInput
	RegistryId pulumi.StringInput
	Role       pulumi.StringInput
	SleepAfter pulumi.IntPtrInput
}

func (ContainerRegistryIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*containerRegistryIamBindingArgs)(nil)).Elem()
}

type ContainerRegistryIamBindingInput interface {
	pulumi.Input

	ToContainerRegistryIamBindingOutput() ContainerRegistryIamBindingOutput
	ToContainerRegistryIamBindingOutputWithContext(ctx context.Context) ContainerRegistryIamBindingOutput
}

func (*ContainerRegistryIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRegistryIamBinding)(nil))
}

func (i *ContainerRegistryIamBinding) ToContainerRegistryIamBindingOutput() ContainerRegistryIamBindingOutput {
	return i.ToContainerRegistryIamBindingOutputWithContext(context.Background())
}

func (i *ContainerRegistryIamBinding) ToContainerRegistryIamBindingOutputWithContext(ctx context.Context) ContainerRegistryIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRegistryIamBindingOutput)
}

type ContainerRegistryIamBindingOutput struct {
	*pulumi.OutputState
}

func (ContainerRegistryIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainerRegistryIamBinding)(nil))
}

func (o ContainerRegistryIamBindingOutput) ToContainerRegistryIamBindingOutput() ContainerRegistryIamBindingOutput {
	return o
}

func (o ContainerRegistryIamBindingOutput) ToContainerRegistryIamBindingOutputWithContext(ctx context.Context) ContainerRegistryIamBindingOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ContainerRegistryIamBindingOutput{})
}
