// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type MdbKafkaCluster struct {
	pulumi.CustomResourceState

	Config           MdbKafkaClusterConfigOutput     `pulumi:"config"`
	CreatedAt        pulumi.StringOutput             `pulumi:"createdAt"`
	Description      pulumi.StringPtrOutput          `pulumi:"description"`
	Environment      pulumi.StringPtrOutput          `pulumi:"environment"`
	FolderId         pulumi.StringOutput             `pulumi:"folderId"`
	Health           pulumi.StringOutput             `pulumi:"health"`
	Labels           pulumi.StringMapOutput          `pulumi:"labels"`
	Name             pulumi.StringOutput             `pulumi:"name"`
	NetworkId        pulumi.StringOutput             `pulumi:"networkId"`
	SecurityGroupIds pulumi.StringArrayOutput        `pulumi:"securityGroupIds"`
	Status           pulumi.StringOutput             `pulumi:"status"`
	SubnetIds        pulumi.StringArrayOutput        `pulumi:"subnetIds"`
	Topics           MdbKafkaClusterTopicArrayOutput `pulumi:"topics"`
	Users            MdbKafkaClusterUserArrayOutput  `pulumi:"users"`
}

// NewMdbKafkaCluster registers a new resource with the given unique name, arguments, and options.
func NewMdbKafkaCluster(ctx *pulumi.Context,
	name string, args *MdbKafkaClusterArgs, opts ...pulumi.ResourceOption) (*MdbKafkaCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	var resource MdbKafkaCluster
	err := ctx.RegisterResource("yandex:index/mdbKafkaCluster:MdbKafkaCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMdbKafkaCluster gets an existing MdbKafkaCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMdbKafkaCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MdbKafkaClusterState, opts ...pulumi.ResourceOption) (*MdbKafkaCluster, error) {
	var resource MdbKafkaCluster
	err := ctx.ReadResource("yandex:index/mdbKafkaCluster:MdbKafkaCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MdbKafkaCluster resources.
type mdbKafkaClusterState struct {
	Config           *MdbKafkaClusterConfig `pulumi:"config"`
	CreatedAt        *string                `pulumi:"createdAt"`
	Description      *string                `pulumi:"description"`
	Environment      *string                `pulumi:"environment"`
	FolderId         *string                `pulumi:"folderId"`
	Health           *string                `pulumi:"health"`
	Labels           map[string]string      `pulumi:"labels"`
	Name             *string                `pulumi:"name"`
	NetworkId        *string                `pulumi:"networkId"`
	SecurityGroupIds []string               `pulumi:"securityGroupIds"`
	Status           *string                `pulumi:"status"`
	SubnetIds        []string               `pulumi:"subnetIds"`
	Topics           []MdbKafkaClusterTopic `pulumi:"topics"`
	Users            []MdbKafkaClusterUser  `pulumi:"users"`
}

type MdbKafkaClusterState struct {
	Config           MdbKafkaClusterConfigPtrInput
	CreatedAt        pulumi.StringPtrInput
	Description      pulumi.StringPtrInput
	Environment      pulumi.StringPtrInput
	FolderId         pulumi.StringPtrInput
	Health           pulumi.StringPtrInput
	Labels           pulumi.StringMapInput
	Name             pulumi.StringPtrInput
	NetworkId        pulumi.StringPtrInput
	SecurityGroupIds pulumi.StringArrayInput
	Status           pulumi.StringPtrInput
	SubnetIds        pulumi.StringArrayInput
	Topics           MdbKafkaClusterTopicArrayInput
	Users            MdbKafkaClusterUserArrayInput
}

func (MdbKafkaClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*mdbKafkaClusterState)(nil)).Elem()
}

type mdbKafkaClusterArgs struct {
	Config           MdbKafkaClusterConfig  `pulumi:"config"`
	Description      *string                `pulumi:"description"`
	Environment      *string                `pulumi:"environment"`
	FolderId         *string                `pulumi:"folderId"`
	Labels           map[string]string      `pulumi:"labels"`
	Name             *string                `pulumi:"name"`
	NetworkId        string                 `pulumi:"networkId"`
	SecurityGroupIds []string               `pulumi:"securityGroupIds"`
	SubnetIds        []string               `pulumi:"subnetIds"`
	Topics           []MdbKafkaClusterTopic `pulumi:"topics"`
	Users            []MdbKafkaClusterUser  `pulumi:"users"`
}

// The set of arguments for constructing a MdbKafkaCluster resource.
type MdbKafkaClusterArgs struct {
	Config           MdbKafkaClusterConfigInput
	Description      pulumi.StringPtrInput
	Environment      pulumi.StringPtrInput
	FolderId         pulumi.StringPtrInput
	Labels           pulumi.StringMapInput
	Name             pulumi.StringPtrInput
	NetworkId        pulumi.StringInput
	SecurityGroupIds pulumi.StringArrayInput
	SubnetIds        pulumi.StringArrayInput
	Topics           MdbKafkaClusterTopicArrayInput
	Users            MdbKafkaClusterUserArrayInput
}

func (MdbKafkaClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mdbKafkaClusterArgs)(nil)).Elem()
}

type MdbKafkaClusterInput interface {
	pulumi.Input

	ToMdbKafkaClusterOutput() MdbKafkaClusterOutput
	ToMdbKafkaClusterOutputWithContext(ctx context.Context) MdbKafkaClusterOutput
}

func (*MdbKafkaCluster) ElementType() reflect.Type {
	return reflect.TypeOf((*MdbKafkaCluster)(nil))
}

func (i *MdbKafkaCluster) ToMdbKafkaClusterOutput() MdbKafkaClusterOutput {
	return i.ToMdbKafkaClusterOutputWithContext(context.Background())
}

func (i *MdbKafkaCluster) ToMdbKafkaClusterOutputWithContext(ctx context.Context) MdbKafkaClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbKafkaClusterOutput)
}

type MdbKafkaClusterOutput struct {
	*pulumi.OutputState
}

func (MdbKafkaClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MdbKafkaCluster)(nil))
}

func (o MdbKafkaClusterOutput) ToMdbKafkaClusterOutput() MdbKafkaClusterOutput {
	return o
}

func (o MdbKafkaClusterOutput) ToMdbKafkaClusterOutputWithContext(ctx context.Context) MdbKafkaClusterOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(MdbKafkaClusterOutput{})
}
