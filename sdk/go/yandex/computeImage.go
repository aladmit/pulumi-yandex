// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ComputeImage struct {
	pulumi.CustomResourceState

	CreatedAt      pulumi.StringOutput      `pulumi:"createdAt"`
	Description    pulumi.StringPtrOutput   `pulumi:"description"`
	Family         pulumi.StringPtrOutput   `pulumi:"family"`
	FolderId       pulumi.StringOutput      `pulumi:"folderId"`
	Labels         pulumi.StringMapOutput   `pulumi:"labels"`
	MinDiskSize    pulumi.IntOutput         `pulumi:"minDiskSize"`
	Name           pulumi.StringOutput      `pulumi:"name"`
	OsType         pulumi.StringOutput      `pulumi:"osType"`
	ProductIds     pulumi.StringArrayOutput `pulumi:"productIds"`
	Size           pulumi.IntOutput         `pulumi:"size"`
	SourceDisk     pulumi.StringOutput      `pulumi:"sourceDisk"`
	SourceFamily   pulumi.StringOutput      `pulumi:"sourceFamily"`
	SourceImage    pulumi.StringOutput      `pulumi:"sourceImage"`
	SourceSnapshot pulumi.StringOutput      `pulumi:"sourceSnapshot"`
	SourceUrl      pulumi.StringOutput      `pulumi:"sourceUrl"`
	Status         pulumi.StringOutput      `pulumi:"status"`
}

// NewComputeImage registers a new resource with the given unique name, arguments, and options.
func NewComputeImage(ctx *pulumi.Context,
	name string, args *ComputeImageArgs, opts ...pulumi.ResourceOption) (*ComputeImage, error) {
	if args == nil {
		args = &ComputeImageArgs{}
	}

	var resource ComputeImage
	err := ctx.RegisterResource("yandex:index/computeImage:ComputeImage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeImage gets an existing ComputeImage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeImageState, opts ...pulumi.ResourceOption) (*ComputeImage, error) {
	var resource ComputeImage
	err := ctx.ReadResource("yandex:index/computeImage:ComputeImage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeImage resources.
type computeImageState struct {
	CreatedAt      *string           `pulumi:"createdAt"`
	Description    *string           `pulumi:"description"`
	Family         *string           `pulumi:"family"`
	FolderId       *string           `pulumi:"folderId"`
	Labels         map[string]string `pulumi:"labels"`
	MinDiskSize    *int              `pulumi:"minDiskSize"`
	Name           *string           `pulumi:"name"`
	OsType         *string           `pulumi:"osType"`
	ProductIds     []string          `pulumi:"productIds"`
	Size           *int              `pulumi:"size"`
	SourceDisk     *string           `pulumi:"sourceDisk"`
	SourceFamily   *string           `pulumi:"sourceFamily"`
	SourceImage    *string           `pulumi:"sourceImage"`
	SourceSnapshot *string           `pulumi:"sourceSnapshot"`
	SourceUrl      *string           `pulumi:"sourceUrl"`
	Status         *string           `pulumi:"status"`
}

type ComputeImageState struct {
	CreatedAt      pulumi.StringPtrInput
	Description    pulumi.StringPtrInput
	Family         pulumi.StringPtrInput
	FolderId       pulumi.StringPtrInput
	Labels         pulumi.StringMapInput
	MinDiskSize    pulumi.IntPtrInput
	Name           pulumi.StringPtrInput
	OsType         pulumi.StringPtrInput
	ProductIds     pulumi.StringArrayInput
	Size           pulumi.IntPtrInput
	SourceDisk     pulumi.StringPtrInput
	SourceFamily   pulumi.StringPtrInput
	SourceImage    pulumi.StringPtrInput
	SourceSnapshot pulumi.StringPtrInput
	SourceUrl      pulumi.StringPtrInput
	Status         pulumi.StringPtrInput
}

func (ComputeImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeImageState)(nil)).Elem()
}

type computeImageArgs struct {
	Description    *string           `pulumi:"description"`
	Family         *string           `pulumi:"family"`
	FolderId       *string           `pulumi:"folderId"`
	Labels         map[string]string `pulumi:"labels"`
	MinDiskSize    *int              `pulumi:"minDiskSize"`
	Name           *string           `pulumi:"name"`
	OsType         *string           `pulumi:"osType"`
	ProductIds     []string          `pulumi:"productIds"`
	SourceDisk     *string           `pulumi:"sourceDisk"`
	SourceFamily   *string           `pulumi:"sourceFamily"`
	SourceImage    *string           `pulumi:"sourceImage"`
	SourceSnapshot *string           `pulumi:"sourceSnapshot"`
	SourceUrl      *string           `pulumi:"sourceUrl"`
}

// The set of arguments for constructing a ComputeImage resource.
type ComputeImageArgs struct {
	Description    pulumi.StringPtrInput
	Family         pulumi.StringPtrInput
	FolderId       pulumi.StringPtrInput
	Labels         pulumi.StringMapInput
	MinDiskSize    pulumi.IntPtrInput
	Name           pulumi.StringPtrInput
	OsType         pulumi.StringPtrInput
	ProductIds     pulumi.StringArrayInput
	SourceDisk     pulumi.StringPtrInput
	SourceFamily   pulumi.StringPtrInput
	SourceImage    pulumi.StringPtrInput
	SourceSnapshot pulumi.StringPtrInput
	SourceUrl      pulumi.StringPtrInput
}

func (ComputeImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeImageArgs)(nil)).Elem()
}

type ComputeImageInput interface {
	pulumi.Input

	ToComputeImageOutput() ComputeImageOutput
	ToComputeImageOutputWithContext(ctx context.Context) ComputeImageOutput
}

func (*ComputeImage) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeImage)(nil))
}

func (i *ComputeImage) ToComputeImageOutput() ComputeImageOutput {
	return i.ToComputeImageOutputWithContext(context.Background())
}

func (i *ComputeImage) ToComputeImageOutputWithContext(ctx context.Context) ComputeImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeImageOutput)
}

type ComputeImageOutput struct {
	*pulumi.OutputState
}

func (ComputeImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeImage)(nil))
}

func (o ComputeImageOutput) ToComputeImageOutput() ComputeImageOutput {
	return o
}

func (o ComputeImageOutput) ToComputeImageOutputWithContext(ctx context.Context) ComputeImageOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ComputeImageOutput{})
}
