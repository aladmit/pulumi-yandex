// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ComputeSnapshot struct {
	pulumi.CustomResourceState

	CreatedAt    pulumi.StringOutput    `pulumi:"createdAt"`
	Description  pulumi.StringPtrOutput `pulumi:"description"`
	DiskSize     pulumi.IntOutput       `pulumi:"diskSize"`
	FolderId     pulumi.StringOutput    `pulumi:"folderId"`
	Labels       pulumi.StringMapOutput `pulumi:"labels"`
	Name         pulumi.StringOutput    `pulumi:"name"`
	SourceDiskId pulumi.StringOutput    `pulumi:"sourceDiskId"`
	StorageSize  pulumi.IntOutput       `pulumi:"storageSize"`
}

// NewComputeSnapshot registers a new resource with the given unique name, arguments, and options.
func NewComputeSnapshot(ctx *pulumi.Context,
	name string, args *ComputeSnapshotArgs, opts ...pulumi.ResourceOption) (*ComputeSnapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SourceDiskId == nil {
		return nil, errors.New("invalid value for required argument 'SourceDiskId'")
	}
	var resource ComputeSnapshot
	err := ctx.RegisterResource("yandex:index/computeSnapshot:ComputeSnapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeSnapshot gets an existing ComputeSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeSnapshotState, opts ...pulumi.ResourceOption) (*ComputeSnapshot, error) {
	var resource ComputeSnapshot
	err := ctx.ReadResource("yandex:index/computeSnapshot:ComputeSnapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeSnapshot resources.
type computeSnapshotState struct {
	CreatedAt    *string           `pulumi:"createdAt"`
	Description  *string           `pulumi:"description"`
	DiskSize     *int              `pulumi:"diskSize"`
	FolderId     *string           `pulumi:"folderId"`
	Labels       map[string]string `pulumi:"labels"`
	Name         *string           `pulumi:"name"`
	SourceDiskId *string           `pulumi:"sourceDiskId"`
	StorageSize  *int              `pulumi:"storageSize"`
}

type ComputeSnapshotState struct {
	CreatedAt    pulumi.StringPtrInput
	Description  pulumi.StringPtrInput
	DiskSize     pulumi.IntPtrInput
	FolderId     pulumi.StringPtrInput
	Labels       pulumi.StringMapInput
	Name         pulumi.StringPtrInput
	SourceDiskId pulumi.StringPtrInput
	StorageSize  pulumi.IntPtrInput
}

func (ComputeSnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeSnapshotState)(nil)).Elem()
}

type computeSnapshotArgs struct {
	Description  *string           `pulumi:"description"`
	FolderId     *string           `pulumi:"folderId"`
	Labels       map[string]string `pulumi:"labels"`
	Name         *string           `pulumi:"name"`
	SourceDiskId string            `pulumi:"sourceDiskId"`
}

// The set of arguments for constructing a ComputeSnapshot resource.
type ComputeSnapshotArgs struct {
	Description  pulumi.StringPtrInput
	FolderId     pulumi.StringPtrInput
	Labels       pulumi.StringMapInput
	Name         pulumi.StringPtrInput
	SourceDiskId pulumi.StringInput
}

func (ComputeSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeSnapshotArgs)(nil)).Elem()
}

type ComputeSnapshotInput interface {
	pulumi.Input

	ToComputeSnapshotOutput() ComputeSnapshotOutput
	ToComputeSnapshotOutputWithContext(ctx context.Context) ComputeSnapshotOutput
}

func (*ComputeSnapshot) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeSnapshot)(nil))
}

func (i *ComputeSnapshot) ToComputeSnapshotOutput() ComputeSnapshotOutput {
	return i.ToComputeSnapshotOutputWithContext(context.Background())
}

func (i *ComputeSnapshot) ToComputeSnapshotOutputWithContext(ctx context.Context) ComputeSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeSnapshotOutput)
}

type ComputeSnapshotOutput struct {
	*pulumi.OutputState
}

func (ComputeSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComputeSnapshot)(nil))
}

func (o ComputeSnapshotOutput) ToComputeSnapshotOutput() ComputeSnapshotOutput {
	return o
}

func (o ComputeSnapshotOutput) ToComputeSnapshotOutputWithContext(ctx context.Context) ComputeSnapshotOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ComputeSnapshotOutput{})
}
