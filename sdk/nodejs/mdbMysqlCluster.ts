// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class MdbMysqlCluster extends pulumi.CustomResource {
    /**
     * Get an existing MdbMysqlCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MdbMysqlClusterState, opts?: pulumi.CustomResourceOptions): MdbMysqlCluster {
        return new MdbMysqlCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/mdbMysqlCluster:MdbMysqlCluster';

    /**
     * Returns true if the given object is an instance of MdbMysqlCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MdbMysqlCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MdbMysqlCluster.__pulumiType;
    }

    public readonly access!: pulumi.Output<outputs.MdbMysqlClusterAccess>;
    public readonly backupWindowStart!: pulumi.Output<outputs.MdbMysqlClusterBackupWindowStart>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly databases!: pulumi.Output<outputs.MdbMysqlClusterDatabase[]>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly environment!: pulumi.Output<string>;
    public readonly folderId!: pulumi.Output<string>;
    public /*out*/ readonly health!: pulumi.Output<string>;
    public readonly hosts!: pulumi.Output<outputs.MdbMysqlClusterHost[]>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly mysqlConfig!: pulumi.Output<{[key: string]: string}>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkId!: pulumi.Output<string>;
    public readonly resources!: pulumi.Output<outputs.MdbMysqlClusterResources>;
    public readonly restore!: pulumi.Output<outputs.MdbMysqlClusterRestore | undefined>;
    public readonly securityGroupIds!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly users!: pulumi.Output<outputs.MdbMysqlClusterUser[]>;
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a MdbMysqlCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MdbMysqlClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MdbMysqlClusterArgs | MdbMysqlClusterState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as MdbMysqlClusterState | undefined;
            inputs["access"] = state ? state.access : undefined;
            inputs["backupWindowStart"] = state ? state.backupWindowStart : undefined;
            inputs["createdAt"] = state ? state.createdAt : undefined;
            inputs["databases"] = state ? state.databases : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["environment"] = state ? state.environment : undefined;
            inputs["folderId"] = state ? state.folderId : undefined;
            inputs["health"] = state ? state.health : undefined;
            inputs["hosts"] = state ? state.hosts : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["mysqlConfig"] = state ? state.mysqlConfig : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["networkId"] = state ? state.networkId : undefined;
            inputs["resources"] = state ? state.resources : undefined;
            inputs["restore"] = state ? state.restore : undefined;
            inputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["users"] = state ? state.users : undefined;
            inputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as MdbMysqlClusterArgs | undefined;
            if ((!args || args.databases === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'databases'");
            }
            if ((!args || args.environment === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'environment'");
            }
            if ((!args || args.hosts === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'hosts'");
            }
            if ((!args || args.networkId === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'networkId'");
            }
            if ((!args || args.resources === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'resources'");
            }
            if ((!args || args.users === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'users'");
            }
            if ((!args || args.version === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'version'");
            }
            inputs["access"] = args ? args.access : undefined;
            inputs["backupWindowStart"] = args ? args.backupWindowStart : undefined;
            inputs["databases"] = args ? args.databases : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["environment"] = args ? args.environment : undefined;
            inputs["folderId"] = args ? args.folderId : undefined;
            inputs["hosts"] = args ? args.hosts : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["mysqlConfig"] = args ? args.mysqlConfig : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["networkId"] = args ? args.networkId : undefined;
            inputs["resources"] = args ? args.resources : undefined;
            inputs["restore"] = args ? args.restore : undefined;
            inputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            inputs["users"] = args ? args.users : undefined;
            inputs["version"] = args ? args.version : undefined;
            inputs["createdAt"] = undefined /*out*/;
            inputs["health"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(MdbMysqlCluster.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MdbMysqlCluster resources.
 */
export interface MdbMysqlClusterState {
    readonly access?: pulumi.Input<inputs.MdbMysqlClusterAccess>;
    readonly backupWindowStart?: pulumi.Input<inputs.MdbMysqlClusterBackupWindowStart>;
    readonly createdAt?: pulumi.Input<string>;
    readonly databases?: pulumi.Input<pulumi.Input<inputs.MdbMysqlClusterDatabase>[]>;
    readonly description?: pulumi.Input<string>;
    readonly environment?: pulumi.Input<string>;
    readonly folderId?: pulumi.Input<string>;
    readonly health?: pulumi.Input<string>;
    readonly hosts?: pulumi.Input<pulumi.Input<inputs.MdbMysqlClusterHost>[]>;
    readonly labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly mysqlConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly name?: pulumi.Input<string>;
    readonly networkId?: pulumi.Input<string>;
    readonly resources?: pulumi.Input<inputs.MdbMysqlClusterResources>;
    readonly restore?: pulumi.Input<inputs.MdbMysqlClusterRestore>;
    readonly securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    readonly status?: pulumi.Input<string>;
    readonly users?: pulumi.Input<pulumi.Input<inputs.MdbMysqlClusterUser>[]>;
    readonly version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MdbMysqlCluster resource.
 */
export interface MdbMysqlClusterArgs {
    readonly access?: pulumi.Input<inputs.MdbMysqlClusterAccess>;
    readonly backupWindowStart?: pulumi.Input<inputs.MdbMysqlClusterBackupWindowStart>;
    readonly databases: pulumi.Input<pulumi.Input<inputs.MdbMysqlClusterDatabase>[]>;
    readonly description?: pulumi.Input<string>;
    readonly environment: pulumi.Input<string>;
    readonly folderId?: pulumi.Input<string>;
    readonly hosts: pulumi.Input<pulumi.Input<inputs.MdbMysqlClusterHost>[]>;
    readonly labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly mysqlConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly name?: pulumi.Input<string>;
    readonly networkId: pulumi.Input<string>;
    readonly resources: pulumi.Input<inputs.MdbMysqlClusterResources>;
    readonly restore?: pulumi.Input<inputs.MdbMysqlClusterRestore>;
    readonly securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    readonly users: pulumi.Input<pulumi.Input<inputs.MdbMysqlClusterUser>[]>;
    readonly version: pulumi.Input<string>;
}
