// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class KubernetesCluster extends pulumi.CustomResource {
    /**
     * Get an existing KubernetesCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KubernetesClusterState, opts?: pulumi.CustomResourceOptions): KubernetesCluster {
        return new KubernetesCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/kubernetesCluster:KubernetesCluster';

    /**
     * Returns true if the given object is an instance of KubernetesCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KubernetesCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KubernetesCluster.__pulumiType;
    }

    public readonly clusterIpv4Range!: pulumi.Output<string>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly folderId!: pulumi.Output<string>;
    public /*out*/ readonly health!: pulumi.Output<string>;
    public readonly kmsProvider!: pulumi.Output<outputs.KubernetesClusterKmsProvider | undefined>;
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    public readonly master!: pulumi.Output<outputs.KubernetesClusterMaster>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkId!: pulumi.Output<string>;
    public readonly networkPolicyProvider!: pulumi.Output<string | undefined>;
    public readonly nodeIpv4CidrMaskSize!: pulumi.Output<number | undefined>;
    public readonly nodeServiceAccountId!: pulumi.Output<string>;
    public readonly releaseChannel!: pulumi.Output<string>;
    public readonly serviceAccountId!: pulumi.Output<string>;
    public readonly serviceIpv4Range!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a KubernetesCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KubernetesClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KubernetesClusterArgs | KubernetesClusterState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as KubernetesClusterState | undefined;
            inputs["clusterIpv4Range"] = state ? state.clusterIpv4Range : undefined;
            inputs["createdAt"] = state ? state.createdAt : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["folderId"] = state ? state.folderId : undefined;
            inputs["health"] = state ? state.health : undefined;
            inputs["kmsProvider"] = state ? state.kmsProvider : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["master"] = state ? state.master : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["networkId"] = state ? state.networkId : undefined;
            inputs["networkPolicyProvider"] = state ? state.networkPolicyProvider : undefined;
            inputs["nodeIpv4CidrMaskSize"] = state ? state.nodeIpv4CidrMaskSize : undefined;
            inputs["nodeServiceAccountId"] = state ? state.nodeServiceAccountId : undefined;
            inputs["releaseChannel"] = state ? state.releaseChannel : undefined;
            inputs["serviceAccountId"] = state ? state.serviceAccountId : undefined;
            inputs["serviceIpv4Range"] = state ? state.serviceIpv4Range : undefined;
            inputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as KubernetesClusterArgs | undefined;
            if ((!args || args.master === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'master'");
            }
            if ((!args || args.networkId === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'networkId'");
            }
            if ((!args || args.nodeServiceAccountId === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'nodeServiceAccountId'");
            }
            if ((!args || args.serviceAccountId === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'serviceAccountId'");
            }
            inputs["clusterIpv4Range"] = args ? args.clusterIpv4Range : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["folderId"] = args ? args.folderId : undefined;
            inputs["kmsProvider"] = args ? args.kmsProvider : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["master"] = args ? args.master : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["networkId"] = args ? args.networkId : undefined;
            inputs["networkPolicyProvider"] = args ? args.networkPolicyProvider : undefined;
            inputs["nodeIpv4CidrMaskSize"] = args ? args.nodeIpv4CidrMaskSize : undefined;
            inputs["nodeServiceAccountId"] = args ? args.nodeServiceAccountId : undefined;
            inputs["releaseChannel"] = args ? args.releaseChannel : undefined;
            inputs["serviceAccountId"] = args ? args.serviceAccountId : undefined;
            inputs["serviceIpv4Range"] = args ? args.serviceIpv4Range : undefined;
            inputs["createdAt"] = undefined /*out*/;
            inputs["health"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(KubernetesCluster.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KubernetesCluster resources.
 */
export interface KubernetesClusterState {
    readonly clusterIpv4Range?: pulumi.Input<string>;
    readonly createdAt?: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly folderId?: pulumi.Input<string>;
    readonly health?: pulumi.Input<string>;
    readonly kmsProvider?: pulumi.Input<inputs.KubernetesClusterKmsProvider>;
    readonly labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly master?: pulumi.Input<inputs.KubernetesClusterMaster>;
    readonly name?: pulumi.Input<string>;
    readonly networkId?: pulumi.Input<string>;
    readonly networkPolicyProvider?: pulumi.Input<string>;
    readonly nodeIpv4CidrMaskSize?: pulumi.Input<number>;
    readonly nodeServiceAccountId?: pulumi.Input<string>;
    readonly releaseChannel?: pulumi.Input<string>;
    readonly serviceAccountId?: pulumi.Input<string>;
    readonly serviceIpv4Range?: pulumi.Input<string>;
    readonly status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KubernetesCluster resource.
 */
export interface KubernetesClusterArgs {
    readonly clusterIpv4Range?: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly folderId?: pulumi.Input<string>;
    readonly kmsProvider?: pulumi.Input<inputs.KubernetesClusterKmsProvider>;
    readonly labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly master: pulumi.Input<inputs.KubernetesClusterMaster>;
    readonly name?: pulumi.Input<string>;
    readonly networkId: pulumi.Input<string>;
    readonly networkPolicyProvider?: pulumi.Input<string>;
    readonly nodeIpv4CidrMaskSize?: pulumi.Input<number>;
    readonly nodeServiceAccountId: pulumi.Input<string>;
    readonly releaseChannel?: pulumi.Input<string>;
    readonly serviceAccountId: pulumi.Input<string>;
    readonly serviceIpv4Range?: pulumi.Input<string>;
}
