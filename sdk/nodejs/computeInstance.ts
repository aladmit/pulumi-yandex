// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class ComputeInstance extends pulumi.CustomResource {
    /**
     * Get an existing ComputeInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComputeInstanceState, opts?: pulumi.CustomResourceOptions): ComputeInstance {
        return new ComputeInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/computeInstance:ComputeInstance';

    /**
     * Returns true if the given object is an instance of ComputeInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComputeInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComputeInstance.__pulumiType;
    }

    public readonly allowStoppingForUpdate!: pulumi.Output<boolean | undefined>;
    public readonly bootDisk!: pulumi.Output<outputs.ComputeInstanceBootDisk>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly folderId!: pulumi.Output<string>;
    public /*out*/ readonly fqdn!: pulumi.Output<string>;
    public readonly hostname!: pulumi.Output<string>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly metadata!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkAccelerationType!: pulumi.Output<string | undefined>;
    public readonly networkInterfaces!: pulumi.Output<outputs.ComputeInstanceNetworkInterface[]>;
    public readonly placementPolicy!: pulumi.Output<outputs.ComputeInstancePlacementPolicy>;
    public readonly platformId!: pulumi.Output<string | undefined>;
    public readonly resources!: pulumi.Output<outputs.ComputeInstanceResources>;
    public readonly schedulingPolicy!: pulumi.Output<outputs.ComputeInstanceSchedulingPolicy>;
    public readonly secondaryDisks!: pulumi.Output<outputs.ComputeInstanceSecondaryDisk[] | undefined>;
    public readonly serviceAccountId!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a ComputeInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComputeInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComputeInstanceArgs | ComputeInstanceState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ComputeInstanceState | undefined;
            inputs["allowStoppingForUpdate"] = state ? state.allowStoppingForUpdate : undefined;
            inputs["bootDisk"] = state ? state.bootDisk : undefined;
            inputs["createdAt"] = state ? state.createdAt : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["folderId"] = state ? state.folderId : undefined;
            inputs["fqdn"] = state ? state.fqdn : undefined;
            inputs["hostname"] = state ? state.hostname : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["metadata"] = state ? state.metadata : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["networkAccelerationType"] = state ? state.networkAccelerationType : undefined;
            inputs["networkInterfaces"] = state ? state.networkInterfaces : undefined;
            inputs["placementPolicy"] = state ? state.placementPolicy : undefined;
            inputs["platformId"] = state ? state.platformId : undefined;
            inputs["resources"] = state ? state.resources : undefined;
            inputs["schedulingPolicy"] = state ? state.schedulingPolicy : undefined;
            inputs["secondaryDisks"] = state ? state.secondaryDisks : undefined;
            inputs["serviceAccountId"] = state ? state.serviceAccountId : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as ComputeInstanceArgs | undefined;
            if ((!args || args.bootDisk === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'bootDisk'");
            }
            if ((!args || args.networkInterfaces === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'networkInterfaces'");
            }
            if ((!args || args.resources === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'resources'");
            }
            inputs["allowStoppingForUpdate"] = args ? args.allowStoppingForUpdate : undefined;
            inputs["bootDisk"] = args ? args.bootDisk : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["folderId"] = args ? args.folderId : undefined;
            inputs["hostname"] = args ? args.hostname : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["metadata"] = args ? args.metadata : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["networkAccelerationType"] = args ? args.networkAccelerationType : undefined;
            inputs["networkInterfaces"] = args ? args.networkInterfaces : undefined;
            inputs["placementPolicy"] = args ? args.placementPolicy : undefined;
            inputs["platformId"] = args ? args.platformId : undefined;
            inputs["resources"] = args ? args.resources : undefined;
            inputs["schedulingPolicy"] = args ? args.schedulingPolicy : undefined;
            inputs["secondaryDisks"] = args ? args.secondaryDisks : undefined;
            inputs["serviceAccountId"] = args ? args.serviceAccountId : undefined;
            inputs["zone"] = args ? args.zone : undefined;
            inputs["createdAt"] = undefined /*out*/;
            inputs["fqdn"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ComputeInstance.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ComputeInstance resources.
 */
export interface ComputeInstanceState {
    readonly allowStoppingForUpdate?: pulumi.Input<boolean>;
    readonly bootDisk?: pulumi.Input<inputs.ComputeInstanceBootDisk>;
    readonly createdAt?: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly folderId?: pulumi.Input<string>;
    readonly fqdn?: pulumi.Input<string>;
    readonly hostname?: pulumi.Input<string>;
    readonly labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly name?: pulumi.Input<string>;
    readonly networkAccelerationType?: pulumi.Input<string>;
    readonly networkInterfaces?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceNetworkInterface>[]>;
    readonly placementPolicy?: pulumi.Input<inputs.ComputeInstancePlacementPolicy>;
    readonly platformId?: pulumi.Input<string>;
    readonly resources?: pulumi.Input<inputs.ComputeInstanceResources>;
    readonly schedulingPolicy?: pulumi.Input<inputs.ComputeInstanceSchedulingPolicy>;
    readonly secondaryDisks?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceSecondaryDisk>[]>;
    readonly serviceAccountId?: pulumi.Input<string>;
    readonly status?: pulumi.Input<string>;
    readonly zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ComputeInstance resource.
 */
export interface ComputeInstanceArgs {
    readonly allowStoppingForUpdate?: pulumi.Input<boolean>;
    readonly bootDisk: pulumi.Input<inputs.ComputeInstanceBootDisk>;
    readonly description?: pulumi.Input<string>;
    readonly folderId?: pulumi.Input<string>;
    readonly hostname?: pulumi.Input<string>;
    readonly labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    readonly name?: pulumi.Input<string>;
    readonly networkAccelerationType?: pulumi.Input<string>;
    readonly networkInterfaces: pulumi.Input<pulumi.Input<inputs.ComputeInstanceNetworkInterface>[]>;
    readonly placementPolicy?: pulumi.Input<inputs.ComputeInstancePlacementPolicy>;
    readonly platformId?: pulumi.Input<string>;
    readonly resources: pulumi.Input<inputs.ComputeInstanceResources>;
    readonly schedulingPolicy?: pulumi.Input<inputs.ComputeInstanceSchedulingPolicy>;
    readonly secondaryDisks?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceSecondaryDisk>[]>;
    readonly serviceAccountId?: pulumi.Input<string>;
    readonly zone?: pulumi.Input<string>;
}
